<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>bkardell.com rss feed</title>
        <link>http://bkardell.com/</link>
        <description>Just the bkardell.com rss feed</description>
        <lastBuildDate>Thu, 13 Mar 2025 13:24:19 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>awesome mix</generator>
        <image>
            <title>bkardell.com rss feed</title>
            <url>http://bkardell.com/profile.jpg</url>
            <link>http://bkardell.com/</link>
        </image>
        <copyright>All rights reserved 2018, Brian Kardell</copyright>
        <atom:link href="https://bkardell.com/blog/feed.atom" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[11ty Math]]></title>
            <link>https://bkardell.com/blog/11tyMath.html</link>
            <guid>https://bkardell.com/blog/11tyMath.html</guid>
            <pubDate>Wed, 12 Mar 2025 04:00:00 GMT</pubDate>
            <description><![CDATA[Markdown, LaTex and ASCII - who writes HTML?]]></description>
            <content:encoded><![CDATA[
	<h1 class="contextual-heading" style="font-size: 2rem;">11ty Math</h1>
	<p class="segue">Markdown, LaTex and ASCII - who writes HTML?</p>
	<script src="../prism.js"></script>
    <link rel="stylesheet" href="../prism.css">
    <link rel="stylesheet" href="https://fred-wang.github.io/MathFonts/STIX/mathfonts.css">
    
	<p>Very nearly none of the content that we encounter online is entirely hand authored from opening doctype to closing HTML tag - it's assembled.  We have layouts, and includes and templates and so on.  And, most of the actual <em>content</em> that we produce and consume is written in some more familiar or easier to write shorthand.  For most of the people reading this, it's probably mostly markdown.</p>

	<p>But did you know that lots of the places that you use markdown <a href="https://docs.github.com/en/get-started/writing-on-github/working-with-advanced-formatting/writing-mathematical-expressions">like GitHub</a> and GitLab, and <a href="https://code.visualstudio.com/docs/languages/markdown">Visual Studio</a> support embedding mathematical expressions written in LaTex surrounded by <code>$</code> (inline) or <code>$$</code> (block)? Those are then transformed for you to rendered Math with MathML?</p>

	<p>It got me thinking that we should have a kind of similarly standard easy setup for 11ty.  It would be a huge win to process it on the server, MathML will render natively, fast, without FOUC. It will be accessible, styleable, scale appropriately with text-size and zoom and so on.</p>

	<p>The super interesting thing to note about most of the tools where you can use markup is that so many of them are built on common infrastructure: <a href="https://github.com/markdown-it/markdown-it">markdown-it</a>.  The architectural pattern of markdown-it allows people to write plugins, and if you're looking to match those above, you can do it pretty easily with the <a href="https://www.npmjs.com/package/@mdit/plugin-katex">@mdit/plugin-katex</a>:

	</p><pre><code class="language-javascript">/* eleventy.config.js */
const markdownIt = require("markdown-it");

module.exports = async function (eleventyConfig) {

  const { katex } = (await import("@mdit/plugin-katex"));
  eleventyConfig.setLibrary(
  	"md", 
  	markdownIt().use(katex, {output: "mathml"})
  );

}</code></pre>

	<p>And... That's it.  Now you can embed LaTex math in your markdown just as you can in those other places and it will do the work of generating fast, native, accessible, and styleable MathML...

	</p><pre><code class="language-html">Some math  $\frac{x^2}{a^2} + \frac{y^2}{b^2} = 1$ whee.</code></pre>

	<p>Yields...</p>
	<pre><code class="language-html">&lt;p&gt;Some math <span class="katex">&lt;math xmlns="http://www.w3.org/1998/Math/MathML"&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mfrac&gt;&lt;msup&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;msup&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;/mfrac&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mfrac&gt;&lt;msup&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;msup&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;/mfrac&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding="application/x-tex"&gt;\frac{x^2}{a^2} + \frac{y^2}{b^2} = 1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt; whee.&lt;/p&gt;</span></code></pre>

	<p>Which your browser renders as...</p>

	<div class="example">
		<p>Some math inline <span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><msup><mi>x</mi><mn>2</mn></msup><msup><mi>a</mi><mn>2</mn></msup></mfrac><mo>+</mo><mfrac><msup><mi>y</mi><mn>2</mn></msup><msup><mi>b</mi><mn>2</mn></msup></mfrac><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\frac{x^2}{a^2} + \frac{y^2}{b^2} = 1</annotation></semantics></math></span> whee.</p>
	</div>

	<p>Surrounding the math part alone with <code>$$</code> instead yields block math, which renders as..</p>

	<p class="katex-block"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><msup><mi>x</mi><mn>2</mn></msup><msup><mi>a</mi><mn>2</mn></msup></mfrac><mo>+</mo><mfrac><msup><mi>y</mi><mn>2</mn></msup><msup><mi>b</mi><mn>2</mn></msup></mfrac><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\frac{x^2}{a^2} + \frac{y^2}{b^2} = 1</annotation></semantics></math></p>



	<section class="sectioning">
		<h2 class="contextual-heading" style="font-size: 2.5rem;">AsciiMath Math / Mathup</h2>
		<p>While LaTeX is by far the most common way that people author math, there are people who prefer AsciiMath.  Rúnar Berg Baugsson Sigríðarson (<a href="https://github.com/runarberg">@runarberg</a>) has a nice <a href="https://runarberg.github.io/mathup/#why-not-tex">explanation as to why they prefer to not use TeX</a>.</p>

		<p>His mathup package seems pretty nice (an AsciiMath dialect more than just AsciiMath), and there is also a corresponding  <a href="https://github.com/runarberg/markdown-it-math">markdown-it-math</a> which is similarly easy to use...</p>

	<pre><code class="language-javascript">/* eleventy.config.js */
const markdownIt = require("markdown-it");

module.exports = async function (eleventyConfig) {
  const markdownItMath = 
  	(await import('markdown-it-math')).default;

  eleventyConfig.setLibrary(
    "md", 
    markdownIt().use(markdownItMath)
  );
}</code></pre>
	
	<p>Then, you can embed AsciiMath in your markdown, fenced by the same <code>$</code> or <code>$$</code> and it will generate some nice MathML. For example...</p>

	<pre><code class="language-html">$$
e = sum_(n=0)^oo 1/n!
$$</code></pre>


	<p>Will be transformed at build time and render in your browser as...</p>

	<math display="block"><mi>e</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><mi mathvariant="normal">∞</mi></munderover><mfrac><mn>1</mn><mrow><mi>n</mi><mo>!</mo></mrow></mfrac></math>

	<p class="note">Make sure you get markdown-it-math 5.0.0-rc.0 or above or this won't work.  You might also consider including <a href="https://cdn.jsdelivr.net/npm/mathup/dist/mathup.css">their stylesheet</a>.</p>

	<p class="note">markdown-it-math also supports a nice pattern for easily integrating other engines for embedded transformations like Ron Kok's <a href="https://temml.org/">Temml</a> or Fred Wang's <a href="https://fred-wang.github.io/TeXZilla/">TeXZilla</a>.</p>

	</section>


	<section class="sectioning">
		<h2 class="contextual-heading" style="font-size: 2.5rem;">Unicode Math</h2>
		<p>There is also Unicode Math, which Murray Sargent III developed and had integrated into all of the Microsoft products.  It's pretty nifty too if you ask me. This repo has a nice <a href="https://github.com/MurrayIII/UnicodeMathML/tree/main?tab=readme-ov-file#how-does-its-syntax-compare-to-asciimath-latex-and-mathml">comparison of the three</a>.</p>

		<p>Unfortunately there is no npm module for it (<a href="https://github.com/doersino/UnicodeMathML/issues/5">yet</a>), so for now, unfortunately that remains an open wish.</p> 
	</section>

	<p>So, that's it.  Enjoy.  Mathify your static sites.</p>

	<p class="note">Before you go... The work of Math rendering in browsers is <em>severely</em> under funded.  Almost none of the effort or funding over the last 30 years to make this possible has come from browser vendors, but rather from individual contributors and those willing to help fund them.  If you appreciate the importance of this work, please consider helping to <a href="https://opencollective.com/mathml-core-support">support the work</a> with a small monthly donation, and please help us to publicly lobby implementers to invest in it.</p>

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Link in Bio]]></title>
            <link>https://bkardell.com/blog/LinkInBio.html</link>
            <guid>https://bkardell.com/blog/LinkInBio.html</guid>
            <pubDate>Thu, 06 Feb 2025 05:00:00 GMT</pubDate>
            <description><![CDATA[Embracing an IndieWeb thing...]]></description>
            <content:encoded><![CDATA[
  <h1 class="contextual-heading" style="font-size: 2rem;">Link in Bio</h1>
  <p class="segue">Embracing an IndieWeb thing...</p>

  <p>Over the years, I've been there as things have come and gone on the interwebs. I had accounts on AIM, MySpace, Blogger, FaceBook, WordPress, Google Plus, Twitter, Instagram, and plenty more.  On each one, I wind up with a profile where I want to link people to other places I am online - and those places don't always make it easy to do that.  So, something short and memorable that you could even type if you had to is ideal - like a handle: @briankardell or @bkardell or, in the end: bkardell.com is pretty great.</p>

  <p>Back in 2016, some folks felt the same frustration and instead created this <a href="https://en.wikipedia.org/wiki/Linktree">Linktree</a> thing.  But... It's just like, a fremium thing that gives you <em>the most basic single page website ever</em>?  Yes, and today they have 50 million users and are valued at $1.3 billion - that's a value of $26/user. I mean, I found that amazing.</p>

  <p>But, here's the thing: After a while I realized that there's something to it.  Not the business model, specifically, but the link in bio idea.  The link in bio is generally not a great website on its own, but it's a page where people can pretty quickly navigate to the thing they're looking for without other noise or fluff.  Which is something that a home page often isn't.  So,  I've learned to really appreciate them, actually.</p>

  <p>Back in about 2020, some IndieWeb folks began <a href="https://indieweb.org/Linktree">thinking about, criticizing and brainstorming around it too</a>.  They began writing about <a href="https://indieweb.org/link_in_bio">Link in Bio</a>, and why it might be useful to have your own version.  There are several examples of people doing something similar.</p>

  <p>Recently a bunch of things smashed together in my mind.  First, on ShopTalk, I heard Chris and Dave talking about "<a href="https://shoptalkshow.com/647/">slash pages</a>" (pages right off the root domain with <a href="https://slashpages.net/">well known names</a>).  Second, I've been working on social media plans - getting away from some platforms and moving to others and thinking about these problems.  An IndieWeb style `/links` page, that adds <code>rel="me"</code> links is a really nice, simple way to achieve a whole lot of things if we'd all adopt it - not the least of which is that it's an evergreen link, almost as simple as a handle, to where people can find you should you choose to leave...</p>

  <p>So, starting with me, and Igalia, you can find our links at <a href="https://bkardell.com/links">bkardell.com/links</a> and <a href="https://igalia.com/links">igalia.com/links</a> respectively.</p>

  <figure class="captioned-image">
    <img src="/media/2025/bye.png">
    <figcaption>A screenshot of Igalia's post with a sunset and birds flying away, linking to our /links page</figcaption>
  </figure>


]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Interop and Hard Problems]]></title>
            <link>https://bkardell.com/blog/debt.html</link>
            <guid>https://bkardell.com/blog/debt.html</guid>
            <pubDate>Sun, 24 Nov 2024 05:00:00 GMT</pubDate>
            <description><![CDATA[Let's talk about priorities, technical debt and hard problems in the Web Platform...]]></description>
            <content:encoded><![CDATA[
	<h1 class="contextual-heading" style="font-size: 2rem;">Interop and Hard Problems</h1>
	<p class="segue">Let's talk about priorities, technical debt and hard problems in the Web Platform...</p>

	<p>In many ways, browser engine projects are not that different from most other software projects.  The "stewards" still have teams with managers and specializations and budgets and people out on leave, and so on.  They have to prioritize and plan.  And just like every other project I've ever seen, they face the same kinds of pressures and problems:  There are never enough resources for everything, there are always new asks, they always accumulate tech debt, and sometimes there are really hard problems.</p>

	<p>What <em>is</em> perhaps special about them is that they are trying to be more than just an isolated program: They're trying to contribute to a standard, interoperable platform.  The catch, for us, is that we only reap the benefit when something makes it all the way through <em>all</em> of the team's independent priority gauntlets, get shipped widely, and so on.</p>

	<p>This can be kind of painful to experience.</p>
	
	<p>For example, consider the <code>&lt;details&gt;</code> element. It's literally the simplest possible interactive element. Here's how we got it:</p>

	<ul>
	<li>In June 2011, Chrome shipped <code>&lt;details&gt;</code>.</li>
	<li>A year later, in July 2012, Safari shipped it.</li>
	<li>Another year later in July 2013, Opera shipped it.</li>
	<li>Still another three years later, in September 2016, Firefox shipped it</li>
	<li>Microsoft <em>never</em> implemented it - we finally got the last implementation when Edge moved to Chromium in 2020.</li>
	</ul>
	<p>If you're counting, that's <em>nine</em> years it took to reach shipping in all browsers. The newly defined "<a href="https://web.dev/baseline">Baseline Widely Available</a>" which indicates roughly when something should have reached as close to 100% market-share/deployment as possible would take another three... So, more or less, that happened last year.</p>

	<p>And that's just the <em>initial</em> and <em>appealing</em> part. Then there are, of course, bugs discovered, new tests added, and ultimately feature improvements and iterations and so on.  Even currently there are newly failing tests that make support for <code>&lt;details&gt;</code> ragged as we've tried to improve things like find-in-page and and add new concepts like invokers.</p>


	<p>As time goes by, we're accumulating squares in the feature grid and new "gaps" in it faster than we're filling them.  We're accumulating tech debt. </p>


	<section class="sectioning">
		<h2 class="contextual-heading" style="font-size: 2.5rem;">Enter Interop</h2>
		
		<p>Interop <em>was</em> originally intended as a way to pay down, that debt:  Let's pick some things to prioritize together and turn all of the little red failure squares green.  But prioritizing is tricky.</p>

		<p>We'll get <em>very roughly</em> around 100 submissions of what we should focus on every year.  But Interop is merely allowing browser makers to agree on how to focus and prioritize on some of the same things.  The resources themselves are still finite.  That means that prioritizing some things inevitably means <em>not</em> prioritizing something else.</p>

		<p>And, there are a lot of competing pressures about what to prioritize, and why.</p>

		<p>For example: It is <em>super</em> effective for developers if we can focus <em>initial</em> developments together.  Imagine if we could have delivered <code>&lt;details&gt;</code> across the board and very high quality in 2011, or 2012.</p>

		<p>Focusing together on a few new features has other added benefits too.  People are more excited to work on it for one.  We also get everyone talking about the same things at the same time, that's helpful - nobody misses the big event. It means use will grow faster, etc.  It gives us something a like ECMA annual editions.  So, it's a little unsurprising that <a href="https://wpt.fyi/interop-2024">last year, Interop</a> included areas like CSS nesting, popover, relative color syntax, declarative shadow DOM.</p>

		<p>However - at the other end of the spectrum, there are lots of things which are already very ragged.  These things are damned hard to prioritize. They're all over the map. They are of obviously different, and debatable kinds of value, to sometimes very different communities. They can also incur different costs on different engines, and so on.</p>

		<p>All of this conspires together to create  some perennially hard problems.  They continue to be needs, sometimes for <em>exceedingly</em> long times.</p>

	</section>
	<section class="sectioning">
		<h2 class="contextual-heading" style="font-size: 2.5rem;">Perennially Hard Problems</h2>
		
		<p>This year, I'm making the case that we <em>need</em> to find a way to prioritize those perennially hard problems which, for whatever reason, we can never seem to prioritize.  Perhaps every 5, 7 or 10 years we we should focus on these kinds of projects.</p>

		<p>If you've been reading my blog or listening to our podcast, then you're already aware that MathML and SVG are probably the biggest examples of this kind of problem.  Both are among the oldest web specifications, having their first versions published about the same time as HTML 4.0 and CSS 2.  They were specially integrated with the HTML parser, and are integrated into the HTML Living Standard (<a href="https://html.spec.whatwg.org/#mathml">MathML</a>, <a href="https://html.spec.whatwg.org/#svg-0">SVG</a>).</p>


		<p style="font-weight: bolder;">Yet both are historically dramatically under-funded and much of the actual work on them have been funded by volunteers and non-steward organizations!  26 years later we're still struggling to find the will to cross some important last miles.</p>  

		<p>Thus, every year, we have submissions about both for Interop.</p> 

		<p>The 2024 State of HTML survey found that &lt;svg&gt; was the <a href="https://state-of-html-2024.onrender.com/en-US/features/content/">top content pain point cited by developers</a>, with almost double the pain attributed to “browser support”.  <code>&lt;svg&gt;</code> - that is the literal <code>&lt;svg&gt;</code> element, not including the other ways SVGs can be used - is used on <a href="https://rainy-periwinkle.glitch.me/permalink/831113a2f130c21a753ff9404067a47eaa893bc7fbc3f973a012d50e67123cf2.html">over 55% of HTML pages in the HTTP archive data</a>. Only 27 of HTML's roughly 130 elements are more popular.  SVG is also used heavily in embedded applications powered by Web engines.</p>

		<p>A lot of math content is in more specific sites like arXiv and Wikipedia, which each have millions and millions of equations, or in online education or books.  The HttpArchive crawl isn't the best way to measure that since it is focused mainly on public home pages where there's not likely to be a lot of math.  However, even in the crawl, we still see thousands of pages do load 2 of the most popular JavaScript libraries which are bridging the gaps instead of rendering native math.  This hurts performance and is unique - we don't require JavaScript to render <em>text</em>.  We also know that numerous document editing tools like Adobe Indesign and Microsoft Word support MathML.  Those are complex applications which require a lot of script already, and lacking good support means that they have to load even more.</p>

		<p>Igalia has contributed implementations and improvements with funding from others and ourselves.  Every year we have invested a bit ourselves to keep things moving forward.  But it moves <em>slowly</em> this way.  What we really need are some concerted efforts to push us across those last miles.  We'd go a lot farther, a lot faster, together.</p>

		<p>If you support the idea of some focus and push on these, please let us know - let vendors know. It might help.</p>

		<p>Of course, it might not too.  Historically, it's been difficult.  What we <em>know</em> works is for someone outside of vendors to do the work - or fund it.  Igalia will keep plugging away, but without external funding our own investments only go so far.  If your organization would benefit from these, consider financially sponsoring some work.  Alternatively, you can also <a href="https://opencollective.com/mathml-core-support">help fund work on MathML directly</a>.</p>
	</section>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Igalia: 2024 Mid-season Power Rankings]]></title>
            <link>https://bkardell.com/blog/2024-Midseason.html</link>
            <guid>https://bkardell.com/blog/2024-Midseason.html</guid>
            <pubDate>Fri, 27 Sep 2024 04:00:00 GMT</pubDate>
            <description><![CDATA[Let’s take the good old annual look at how Igalia is stacking up so far in terms of Open Source contributions - you know, "The One With the Charts"]]></description>
            <content:encoded><![CDATA[
  <h1 class="contextual-heading" style="font-size: 2rem;">Igalia: 2024 Mid-season Power Rankings</h1>
  

  <p class="segue">Let’s take the good old annual look at how Igalia is stacking up so far in terms of Open Source contributions - you know, "The One With the Charts"</p>

  <p>Igalia is involved in <em>so many</em> things it's honestly hard for me to keep track.  So, every now and then, I like to step back and take stock of it, and what it means to the open source ecosystem.  Let's have a look...</p>

  <section class="sectioning">
    <h2 class="contextual-heading" style="font-size: 2.5rem;">The Big Browser Projects</h2>
    <p>Some interesting shifts this year in browser projects and where we've made the biggest impacts.</p>

    <section class="sectioning">
      <h3 class="contextual-heading" style="font-size: 3rem;">chromium</h3>

      <p><a href="https://thenextweb.com/news/microsoft-edge-is-officially-switching-to-chromium-in-2019-heres-why-thats-a-good-thing">In 2018 Microsoft announced that they were switching to a Chromium based engine</a>. However, in 2019 it was Igalia (not Microsoft) who wound up with the most commits to Chromium (after Google).  We thought for sure that they would overtake us in 2020, but we also had the most commits in 2020. And in 2021, 2022 and 2023.  5 years later, after increases on their end and some shifts on ours, Microsoft has finally eclipsed us as the one with the most commits after Google.   Congratulations Microsoft!... Enjoy it!  For now :)</p>
    
      <figure>
          <img src="/media/2024/commits/chromium.svg" alt="">
          <details>
            <summary>data</summary>
            <div><h3>Top 10 contributors</h3><table><tbody><tr><th>Contributor</th><th>Contributions</th></tr><tr><td>Microsoft</td><td>37.26%</td></tr><tr><td>Igalia</td><td>17.94%</td></tr><tr><td>Intel</td><td>12.41%</td></tr><tr><td>januschka.com</td><td>6.72%</td></tr><tr><td>Opera</td><td>6.09%</td></tr><tr><td>Samsung</td><td>1.69%</td></tr><tr><td>Bytedance</td><td>1.48%</td></tr><tr><td>LGE</td><td>0.90%</td></tr><tr><td>Anton Bershanskyi</td><td>0.79%</td></tr><tr><td>Md Hasibul Hasan</td><td>0.74%</td></tr></tbody></table></div>
          </details>
      </figure>
   
      <p>It's nice to see Intel and Opera stepping it up this year too!</p>

      <p>It seems impossible to not comment on the fact that &gt; 6.7% of commits this year are from a single individual, <a href="https://github.com/hjanuschka">Helmut Januschka</a> as mostly unpaid work. On the one hand, that's heroic but also, it feels a little exploitative, right? Multi-million, billion or even trillion dollar corporations with products built on chromium could surely fund a little more. If you work for one of those and would like to help change that...</p>

      <figure style="display:grid;">
        <img style="max-width: 400px;margin: auto;" src="/media/2024/commits/callme.gif" alt="">
      </figure>

      <p>Another distinction that is perhaps worth making is that this is measuring commits to the whole chromium project which is kind of a super project. The majority of the code (and commits) are in support of the browser (chromium is a also base browser implementation without some of the "Google" stuff that is in Chrome). These include graphics/rendering related standalone projects like SKIA, or wildvine for DRM, or things that deal with the different OS windowing systems (X/Wayland on Linux, for example), abstract plumbing for chromium based downstream.  On the engine itself, it's mainly just Google, Microsoft, Igalia, Intel and Opera.</p>

    </section>

    <section>
      <conextual-heading>WebKit</conextual-heading>
      <p>Still the number one contributors after Apple to WebKit 💪🏻💪🏼💪🏽💪🏾💪🏿.</p>

      <figure>
          <img src="/media/2024/commits/webkit.svg" alt="">
          <details>
            <summary>data</summary>
            <div><h3>Top 10 contributors</h3><table><tbody><tr><th>Contributor</th><th>Contributions</th></tr><tr><td>Igalia</td><td>65.65%</td></tr><tr><td>Sony</td><td>16.40%</td></tr><tr><td>Ubie</td><td>3.19%</td></tr><tr><td>Red Hat</td><td>2.63%</td></tr><tr><td>softathome.com</td><td>1.16%</td></tr><tr><td>Rose</td><td>0.99%</td></tr><tr><td>Alexey Knyazev</td><td>0.73%</td></tr><tr><td>GitHub</td><td>0.73%</td></tr><tr><td>Ian Grunert</td><td>0.69%</td></tr><tr><td>cox.net</td><td>0.65%</td></tr></tbody></table></div>
          </details>
      </figure>

    </section>

    <section>
      <conextual-heading>Gecko</conextual-heading>
      <p>Hey look at that - Igalia moves into second place after Mozilla! I'm not sure how anyone could not observe that André Bargull
(@anba, a <a href="https://bugzilla.mozilla.org/user_profile?user_id=339940">contributor to Mozilla for 16 years!</a>) is just amazingly prolific and important to the project.  Mozilla has a long tail of almost 600 individual/unaffliated contributors!
</p>

      <figure>
          <img src="/media/2024/commits/mozilla-central.svg" alt="">
          <details>
            <summary>data</summary>
            <div><h3>Top 10 contributors</h3><table><tbody><tr><th>Contributor</th><th>Contributions</th></tr><tr><td>André Bargull</td><td>23.75%</td></tr><tr><td>Igalia</td><td>10.71%</td></tr><tr><td>Red Hat</td><td>8.74%</td></tr><tr><td>Birchill</td><td>6.19%</td></tr><tr><td>protonmail.com</td><td>5.66%</td></tr><tr><td>longsonr</td><td>3.38%</td></tr><tr><td>Jonatan Klemets</td><td>2.43%</td></tr><tr><td>yahoo.com</td><td>1.82%</td></tr><tr><td>Debadree Chatterjee</td><td>1.63%</td></tr><tr><td>Mugurell</td><td>1.52%</td></tr></tbody></table></div>
          </details>
      </figure>

    </section>

  </section>

  <section class="sectioning">
    <h2 class="contextual-heading" style="font-size: 2.5rem;">WHATWG Stuff</h2>
     <section>
      <conextual-heading>HTML</conextual-heading>
      <p>Would you expect Igalia to be #2 in HTML?  We are, this year! It's astounding the size of the role Google plays in a lot of this stuff, really.  Then again, they have the only economic model for it so it makes a lot of sense that they invest heavily - this is peanuts comparatively.</p>
      <figure>
          <img src="/media/2024/commits/html.svg" alt="">
          <details>
            <summary>data</summary>
            <div><h3>Top 10 contributors</h3><table><tbody><tr><th>Contributor</th><th>Contributions</th></tr><tr><td>Google</td><td>40.12%</td></tr><tr><td>Igalia</td><td>14.37%</td></tr><tr><td>Apple</td><td>12.57%</td></tr><tr><td>Mozilla</td><td>3.59%</td></tr><tr><td>ibiblio.org</td><td>2.99%</td></tr><tr><td>w3.org</td><td>2.99%</td></tr><tr><td>Alex Rudenko</td><td>2.40%</td></tr><tr><td>serenityos.org</td><td>1.80%</td></tr><tr><td>meiert.com</td><td>1.80%</td></tr><tr><td>Tawanda Moyo</td><td>1.80%</td></tr></tbody></table></div>
          </details>
      </figure>
    </section>

    <section>
      <conextual-heading>DOM</conextual-heading>
      <p>What about DOM? Hey-o it's us again!  Good job Igalia!</p>
      <figure>
          <img src="/media/2024/commits/dom.svg" alt="">
          <details>
            <summary>data</summary>
            <div><h3>Top 10 contributors</h3><table><tbody><tr><th>Contributor</th><th>Contributions</th></tr><tr><td>Google</td><td>40.12%</td></tr><tr><td>Igalia</td><td>14.37%</td></tr><tr><td>Apple</td><td>12.57%</td></tr><tr><td>Mozilla</td><td>3.59%</td></tr><tr><td>ibiblio.org</td><td>2.99%</td></tr><tr><td>w3.org</td><td>2.99%</td></tr><tr><td>Alex Rudenko</td><td>2.40%</td></tr><tr><td>serenityos.org</td><td>1.80%</td></tr><tr><td>meiert.com</td><td>1.80%</td></tr><tr><td>Tawanda Moyo</td><td>1.80%</td></tr></tbody></table></div>
          </details>
      </figure>
    </section>
  </section>

  <section>
      <conextual-heading>Web Platform Tests</conextual-heading>
      <p>It's almost like we're the 4th browser engine - #4 in contributions to Web Platform Tests, after Google, Mozilla, Apple. Go us!</p>
      <figure>
          <img src="/media/2024/commits/wpt.svg" alt="">
          <details>
            <summary>data</summary>
            <div><h3>Top 10 contributors</h3><table><tbody><tr><th>Contributor</th><th>Contributions</th></tr><tr><td>Google</td><td>45.51%</td></tr><tr><td>Mozilla</td><td>18.49%</td></tr><tr><td>Apple</td><td>7.62%</td></tr><tr><td>Igalia</td><td>6.15%</td></tr><tr><td>Intel</td><td>4.09%</td></tr><tr><td>Microsoft</td><td>3.69%</td></tr><tr><td>Opera</td><td>0.99%</td></tr><tr><td>Maksim Sadym</td><td>0.96%</td></tr><tr><td>Jonathan Lee</td><td>0.88%</td></tr><tr><td>longsonr</td><td>0.78%</td></tr></tbody></table></div>
          </details>
      </figure>
    </section>

  <section class="sectioning">
    <h2 class="contextual-heading" style="font-size: 2.5rem;">We are champions</h2>
    <p>There are also a few related projects where <em>Igalia</em> is now the champion: Servo, the independent, parallel, memory safe, Rust based engine - and Wolvic, the XR browser formerly known as Firefox Reality, and Babel where we have been playing a huge role. In each of these projects Igalia is doing sponsored work, and our own investment because we believe they are important to the ecosystem right now.</p>

    <section>
      <conextual-heading>Servo</conextual-heading>
      <p>#1 in servo 🔥🔥!</p>
      <p>It's still recent history that Igalia got involved in Servo, but it's been exciting to watch it develop!  If you or your organization would be interested in funding some work, reach out to me. You can also donate via <a href="https://github.com/servo">GitHub sponsors</a> or <a href="https://opencollective.com/servo">open collective</a>.</p>
      <figure>
          <img src="/media/2024/commits/servo.svg" alt="">
          <details>
            <summary>data</summary>
            <div><h3>Top 10 contributors</h3><table><tbody><tr><th>Contributor</th><th>Contributions</th></tr><tr><td>Igalia</td><td>43.94%</td></tr><tr><td>sagudev</td><td>7.96%</td></tr><tr><td>Huawei</td><td>4.16%</td></tr><tr><td>inventati.org</td><td>3.71%</td></tr><tr><td>Taym Haddadi</td><td>3.54%</td></tr><tr><td>Oluwatobi Sofela</td><td>3.45%</td></tr><tr><td>Zesty</td><td>2.83%</td></tr><tr><td>Rosemary Ajayi</td><td>2.12%</td></tr><tr><td>Mozilla</td><td>1.77%</td></tr><tr><td>Crab Nebula</td><td>1.68%</td></tr></tbody></table></div>
          </details>
      </figure>
    </section>

    <section>
      <conextual-heading>Babel</conextual-heading>
      <p>Igalia is also #1 in Babel commits 🔥🔥!  Did you expect it? <a href="https://tech.lgbt/@nic">Nicolò Ribaudo</a> has been busy!</p>
      <figure>
          <img src="/media/2024/commits/babel.svg" alt="">
          <details>
            <summary>data</summary>
            <div><h3>Top 10 contributors</h3><table><tbody><tr><th>Contributor</th><th>Contributions</th></tr><tr><td>Igalia</td><td>38.58%</td></tr><tr><td>liuxingbaoyu</td><td>28.19%</td></tr><tr><td>Huáng Jùnliàng</td><td>20.18%</td></tr><tr><td>renovate[bot]</td><td>2.08%</td></tr><tr><td>Amjad Yahia Robeen Hassan</td><td>1.48%</td></tr><tr><td>Sukka</td><td>1.19%</td></tr><tr><td>blake.id</td><td>0.59%</td></tr><tr><td>fisker Cheung</td><td>0.59%</td></tr><tr><td>samual.uk</td><td>0.59%</td></tr><tr><td>ynnsuis</td><td>0.30%</td></tr></tbody></table></div>
          </details>
      </figure>
    </section>

    <section>
      <conextual-heading>Wolvic</conextual-heading>
      <p>Of course, as the stewards of Wolvic, we're the #1 in contributors there too! 91.6% of commits! There's also now the wolvic-chromium </p>
      <figure>
          <img src="/media/2024/commits/wolvic.svg" alt="">
          <details>
            <summary>data</summary>
            <div><h3>Top 10 contributors</h3><table><tbody><tr><th>Contributor</th><th>Contributions</th></tr><tr><td>Igalia</td><td>91.64%</td></tr><tr><td>weblate.org</td><td>1.55%</td></tr><tr><td>reimu.nl</td><td>1.24%</td></tr><tr><td>сэр Аноним</td><td>1.24%</td></tr><tr><td>Felipe Erias</td><td>0.93%</td></tr><tr><td>hotmail.es</td><td>0.93%</td></tr><tr><td>opensuse.org</td><td>0.62%</td></tr><tr><td>Ha Anh Vu</td><td>0.31%</td></tr><tr><td>Houssem Nasri</td><td>0.31%</td></tr><tr><td>HoussemNasri</td><td>0.31%</td></tr></tbody></table></div>
          </details>
      </figure>
    </section>


    <section class="sectioning">
      <h3 class="contextual-heading" style="font-size: 3rem;">Accessibility</h3>
      <p>Igalia has had an investment in accessibility for years. We've got a lot of expertise, and play an important role in some key projects:</p>

      <section>
      <conextual-heading>Orca</conextual-heading>
      <p>Realisically this should be above as we're pretty much the maintainers of Orca, the screen reader for Linux (shout out to my colleague Joanie!).</p>
      <figure>
          <img src="/media/2024/commits/orca.svg" alt="">
          <details>
            <summary>data</summary>
            <div><h3>Top 10 contributors</h3><table><tbody><tr><th>Contributor</th><th>Contributions</th></tr><tr><td>Igalia</td><td>76.43%</td></tr><tr><td>ubuntu.com</td><td>2.42%</td></tr><tr><td>gnome.org</td><td>2.17%</td></tr><tr><td>Andy Holmes</td><td>1.78%</td></tr><tr><td>bk.ru</td><td>1.15%</td></tr><tr><td>pickup.hu</td><td>1.15%</td></tr><tr><td>gtu.ge</td><td>1.15%</td></tr><tr><td>Yaron Shahrabani</td><td>1.15%</td></tr><tr><td>ukr.net</td><td>0.89%</td></tr><tr><td>Sabri Ünal</td><td>0.89%</td></tr></tbody></table></div>
          </details>
      </figure>
    </section>

    <section>
      <conextual-heading>aria</conextual-heading>
      <p>Igalia is #3 in commits to the aria repo - unsurprising as our colleague Valerie Young is co-chair of the working group!</p>
      <figure>
          <img src="/media/2024/commits/aria.svg" alt="">
          <details>
            <summary>data</summary>
            <div><h3>Top 10 contributors</h3><table><tbody><tr><th>Contributor</th><th>Contributions</th></tr><tr><td>Paciello Group</td><td>21.51%</td></tr><tr><td>w3.org</td><td>17.74%</td></tr><tr><td>Igalia</td><td>16.13%</td></tr><tr><td>github-actions[bot]</td><td>9.68%</td></tr><tr><td>Daniel Montalvo</td><td>7.53%</td></tr><tr><td>Peter Krautzberger</td><td>5.38%</td></tr><tr><td>Adobe</td><td>4.84%</td></tr><tr><td>Matt Garrish</td><td>4.30%</td></tr><tr><td>usablenet.com</td><td>1.61%</td></tr><tr><td>pkra</td><td>1.61%</td></tr></tbody></table></div>
          </details>
      </figure>
    </section>

    <section>
      <conextual-heading>CORE-AAM</conextual-heading>
      <p>The AAMs are what actually map the standards to the accessibility layer, there are several of them. Very few people work on these, and guess who is pretty important there too? If you guessed Igalia, you'd be right.  Igalia is the #1 contributor in CORE-AAM, Graphics-AAM and MathML-AAMs.</p>
      <figure>
          <img src="/media/2024/commits/core-aam.svg" alt="">
          <details>
            <summary>data</summary>
            <div><h3>Top 10 contributors</h3><table><tbody><tr><th>Contributor</th><th>Contributions</th></tr><tr><td>github-actions[bot]</td><td>28.57%</td></tr><tr><td>Igalia</td><td>28.57%</td></tr><tr><td>w3.org</td><td>28.57%</td></tr><tr><td>Paciello Group</td><td>14.29%</td></tr></tbody></table></div>
          </details>
      </figure>
    </section>

    </section>

    <section class="sectioning">
      <h3 class="contextual-heading" style="font-size: 3rem;">That's not remotely all</h3>
      <p>These are just some that I am closer to and feel are interesting to highlight, but the list of open source repositories in which Igalia is playing an important to critical role is way longer than this. For example:

      </p><ol>
        <li>Igalia #2 in commits to GStreamer, the powerful multimedia framework.  We're the main maintainers of the GStreamer ports of WebKit used in Linux browsers on desktops as well as on a plethora of embedded devices.</li>
        <li>We've been very involved in work on GL, and contributing to Khronos Vulkan, OpenGL, and OpenGL ES Conformance Tests.  In fact, we are the #1 contributor to the <a href="https://github.com/KhronosGroup/VK-GL-CTS">Vulkan GL Conformance Test Suite Repository</a>!</li>
        <li>Igalia is the #2 contributor to the CI-tron project, which was started by Valve and is currently developed mostly by Valve contractors. CI-tron lets developers easily create CI systems based on bare metal computers, which is particularly important for Mesa and other open-source graphics projects.</li>
        <li>Igalia is the #1 contributor to <a href="https://gitlab.gnome.org/GNOME/libsoup">libsoup</a> the HTTP client/server library for GNOME.</li>
        <li>Igalia is the #3 contributor to <a href="https://gitlab.freedesktop.org/mesa/mesa.git">Mesa</a> the 3D Graphics Library</li>
      </ol>
    </section>

    <p>Anyway, I love to take the time to look at these every year and see how we're doing. It's easy to get lost in the bustle of everything that's going on and miss how much we really do - it's good to take stock.  I hope that others find this interesting too, and maybe learn something about Igalia.  Most of the work that we do is funded by companies. If your organization has some needs, you know where to find me :)</p>

    </section>    
    
   

    
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Keeping up: Signal to Noise]]></title>
            <link>https://bkardell.com/blog/BCD-Watch.html</link>
            <guid>https://bkardell.com/blog/BCD-Watch.html</guid>
            <pubDate>Mon, 23 Sep 2024 04:00:00 GMT</pubDate>
            <description><![CDATA[Last year in December, Eric Meyer and I did an episode of Igalia Chats titled "The Struggle to Keep Up with Web Tech". It recounts the multi-dimensional challenges that developers can face in trying to keep up with developments in the web platform.]]></description>
            <content:encoded><![CDATA[
    <h1 class="contextual-heading" style="font-size: 2rem;">Keeping up: Signal to Noise</h1>
    <p class="segue">Last year in December, Eric Meyer and I did an episode of Igalia Chats titled <a href="https://www.igalia.com/chats/keeping-up">"The Struggle to Keep Up with Web Tech"</a>. It recounts the multi-dimensional challenges that developers can face in trying to keep up with developments in the web platform.</p>
    <p>I've thought for a long time now that we all need better ways to keep up, and especially to <em>not miss the most important stuff</em>. Today, I'm happy to annouce what we think is a real help at that.</p>
    <section class="sectioning">
        <h2 class="contextual-heading" style="font-size: 2.5rem;">Introducing bcd-watch</h2>
        <p>If you're not familiar, "bcd" is short for "browser compatibility data". <a href="https://github.com/mdn/browser-compat-data">The browser-compat-data repository</a> is the source of what is shown on MDN and used for many other critical things as well. All of the browser vendors, contributors and tech writers strive together to keep the information there accurate and up to date.</p>
        <p>Back in 2022, Eric and I had the idea to write a tool which would fetch this data from time to time, compare it with the previous data and put together a brief report that you could view, and an RSS feed you could subscribe to. <a href="https://bkardell.com/blog/CoolTool.html">I wrote a thing about BCD</a> and the fact that you could actually even use GitHub's API to subscribe to the release notes, which are already pretty nice. This was November 2022, and it was teasing a few screenshots from the prototype we had.</p>
        <p>A month and 5 days later, <a href="https://bkardell.com/blog/WeirdHoliday.html">I unexpectedly had a heart attack</a>.</p>
        <p>So, it got shoved to the back burner for a while but today we're finally sharing it. My colleage Eric Meyer has a a much better post annoucing this that I'll just point you to: <a href="https://meyerweb.com/eric/thoughts/2024/09/23/announcing-bcd-watch/">Annoucing BCD-Watch.</a>.</p>  
    </section>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Micropayments History]]></title>
            <link>https://bkardell.com/blog/MicropaymentsHistory.html</link>
            <guid>https://bkardell.com/blog/MicropaymentsHistory.html</guid>
            <pubDate>Mon, 16 Sep 2024 04:00:00 GMT</pubDate>
            <description><![CDATA[Hey, remember that period when there were like a ton of online 'coins' that people are trying to make happen? And they all kind of wanted to be 'the one', they all involved some kind of crypto thing you didn't totally understand, and they'd all enable micropayments and also solve all of these interesting problems about money. Remember when people were like "let's make an IETF standard!" and others were like "this is a thing we should do at the W3C"?  And then some really big companies got involved?   Do you remember that time... in the mid to late 90s?]]></description>
            <content:encoded><![CDATA[
	<h1 class="contextual-heading" style="font-size: 2rem;">Micropayments History</h1>

	<p class="segue">Hey, remember that period when there were like a ton of online 'coins' that people are trying to make happen? And they all kind of wanted to be 'the one', they all involved some kind of crypto thing you didn't totally understand, and they'd all enable micropayments and also solve all of these interesting problems about money. Remember when people were like "let's make an IETF standard!" and others were like "this is a thing we should do at the W3C"?  And then some really big companies got involved?   Do you remember that time... in the mid to late 90s?</p>
	
	<p>Because, it totally happened.</p>
	
	<p>Check out this draft of <a href="https://www.w3.org/TR/WD-mptp-951122">Micro Payment Transfer Protocol (MPTP) Version 0.1 from November 1995</a>, and just have a look at the abstract and references section and note how many proposals there already were in 1995. They're pretty hard to find today, unfortunately, lost to the bit rot of time, but here's <a href="https://bkardell.com/media/RivestShamir-mpay.pdf">one, probably slightly updated version (it's dated May 7, 1996) that I was able to dig up as a postscript file and convert to pdf</a>.  It's focused on how you can mint coins cryptographically, and the cost of it and how you can prevent forgery and theft of coins and so on. </p>
	<p>There are minutes from a <a href="https://www.w3.org/ECommerce/JEPI/951218-minutes.html">joint CommerceNet/W3C Electronic Payments Initiative Kickoff meeting which took place in Paris December 18, 1995</a> which was attended by 50+ people from a wide variety of companies from banking and credit cards to telecom and hardwardware systems. In it there is a mention already of "the people looking at micropayments" and pointing out that "with credit card systems there's usually a minimum dollar amount below which a transaction isn't profitable."</p>
	<p>There's this Jan 1996 IETF draft for <a href="https://www.ietf.org/archive/id/draft-eastlake-internet-payment-01.txt">Application Level Internet Payment Syntax</a>, and in Feb 1997 there was another meeting in Paris in which they discussed <a href="https://www.w3.org/ECommerce/Micropayments/Group/micropay-minutes.htm">micropayments</a> and then again in Brussels in Sept 1997.  There's this grab from <a href="https://web.archive.org/web/19970605015010/http://www.w3.org/pub/WWW/Payments/roadmap.html">W3C's Payments Roadmap (the oldest grab here is from 1997, but it's probably older)</a>. Look how much there is!</p>
	<p>There's also <a href="https://web.archive.org/web/19980703170917/http://www12.w3.org/ECommerce/Micropayments/">this link is to a public w3c page</a> which has a lot of links to things which were "already working (more or less)".</p>
	<p>IBM tried this <a href="https://research.ibm.com/publications/minipay-charging-per-click-on-the-web">minipay thing</a>. Carnegie Mellon developed this <a href="https://www.researchgate.net/publication/2417475_NetBill_Security_and_Transaction_Protocol">NETBILL PROJECT in 1997</a>.  </p>
	<p>Jakob Nielsen's Alertbox had a piece in early 1998: <a href="https://web.archive.org/web/20010203213200/http://www.useit.com/alertbox/980125.html">The Case for Micropayments</a> - in which he said "I predict that most sites that are not financed through traditional product sales will move to micropayments in less than two years." Then about <a href="https://web.archive.org/web/20001208142100/http://www.useit.com/alertbox/991226.html">two years later he doubled down saying</a> "I now finally believe that the first wave of micropayment services will hit in 2000."</p>
	<p>He wasn't totally wrong, because then there was Beanz.  </p>
	<p>It was huge.  Here's <a href="https://www.youtube.com/embed/5o9HEjuXsc0?si=vObMl6suQKAtbGMU">a whole 20 minute video someone did on Beanz</a>. But, in short, it earned multiple big rounds of tens of million dollar funding, even $5m just from Larry Ellison.  It had posh offices worldwide and really got a lot of attention.  I guess it started out as mainly a thing like "loyalty points" but that you could spend anywhere. Everyone had loyalty points, but you could only spend them there. So maybe you smoked Marlboro - you earned "Marlboro Miles" and could trade them in for stuff in their catalog. The idea was "why not let me spend my Marlboro miles toward kinda whatever I want".  In the end, that sounds a lot like "almost money".  Today, I guess credit cards have subsumed this a bit, you can get cash back rewards or other things.</p>
	<p>But, it was also totally new and it had a lot of competitors.  Around 2000 we got a big one: Flooz with Whoopi making commercials!  </p>
	<iframe width="560" height="315" src="https://www.youtube.com/embed/AIEpiUJNi5M?si=CsqfZFiaBk3xPoEE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>
 
	<p>And in that same year we also got My Points (<a href="https://www.mypoints.com/">still around</a>), Netscentives, CyberGold (<a href="https://www.forbes.com/2000/04/17/mu1.html">quickly aquired by MyPoints for $157m</a>), <a href="https://en.wikipedia.org/wiki/InternetCash.com">internetcash.com</a> and even  <a href="https://en.wikipedia.org/wiki/PayPal"><del>Confinity</del> <del>x.com</del> PayPal</a>.  At the same time all of the new tech was helping regular old transaction costs come down too.</p>
	<p>And then the internet bubble burst.  </p>
	<p>And then <a href="https://web.archive.org/web/20010127094100/http://www.oreillynet.com/lpt/a/515">Clay Shirky wrote "The case against micropayments"</a> which argued pretty strongly that they're just a bad idea.</p>
	<p>It seems the W3C work on this also stopped around that time, in 2001.</p>
	<p>I guess it's never totally stopped. There was, for a minute, <a href="https://www.theguardian.com/technology/2004/may/27/phones.creditcards">Simpay</a> - a consortium formed in 2003 by Orange, T-Mobile, Vodafone, and Telefónica to promote mobile payment solutions across Europe (wow that was 20 years ago?!), and as I say some of those things above still exist, as do other things like <a href="https://fetch.com">fetch.com</a> and, others have been integrated into existing systems more as Clay Shirky predicted.  And, well, of course, there was Bitcoin in 2008 and tons of crypto coins that followed.</p>

	<p>Along the way, in March 2014 the W3C had <a href="https://www.w3.org/2013/10/payments/">a workshop on web payments in Paris</a> which discussed also "new virtual currencies".  Ultimately, the W3C work restarted in 2015 to streamline the online “check-out” process and make payments easier and more secure on the Web under the new "<a href="https://www.w3.org/press-releases/2015/webpaymentswg/">Web Payments Working Group</a>."</p>


	<p>Anyway, it was an interesting rabbit hole to dive down, prompted by a number of recent discussions I've had on the health of the web ecosystem and the number of times that something <em>like</em> micropayments seems to come up.  I'll write more about some of those discussions and thoughts in a future post.</p>

	<p class="thanksto">Thanks to my good friend Coralie Mercier for pointing at the rabbit hole and pushing me into it :) And also for a number of pointers and links.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[1.3 Million Subtests]]></title>
            <link>https://bkardell.com/blog/1_3M-WPTMilestone.html</link>
            <guid>https://bkardell.com/blog/1_3M-WPTMilestone.html</guid>
            <pubDate>Fri, 06 Sep 2024 04:00:00 GMT</pubDate>
            <description><![CDATA[Today the Servo project crossed a milestone.]]></description>
            <content:encoded><![CDATA[
	<h1 class="contextual-heading" style="font-size: 2rem;">1.3 Million Subtests</h1>
	<p class="segue">Today the Servo project crossed a milestone.</p>

	<p>If you're not aware, all of the mainstream browsers that exist today use one of three browser projects/engines (Chromium/Blink, Firefox/Gecko or WebKit).  These in turn both have their roots in projects begun in the late 1990's (Gecko and KHTML).  Further, they have only 1 funding model, and largely 1 funding source.  Over the years, the projects have grown to tens of millions of lines of code and have now had tens of thousands of person years worth of investment.</p>

	<p>All of this is just to underscore that getting a new one is incredibly challenging. Microsoft, a web giant, tried and eventually gave up and embraced Chromium.</p> 

	<p><strong><em>But...</em></strong> If you haven't been paying attention, something very fun and exciting has been developing over the last couple of years.  New life has been breathed into a movement for what we call "novel engines" - that is, engines that don't come from those initial two (khtml/Gecko).</p>

	<p>What's more is that most of the life at least comes from 2 engines which are being developed and funded differently - and they're making rapid progress now.</p>

	<p>As of today, one of those novel engines - Servo (stewarded by Igalia) passes 1.3 <em>million</em> subtests in Web Platform Tests! Specfically: 1,303,530 as of this writing! Congratulations Servo project!</p>

	<figure class="captioned-image">
		<video src="/media/2024/nbc-the-good-place.mp4" loop="" controls="">
	</video></figure>

	<p>For perspective, that's over 73% of the subtests that it's currently running.  Of course, that's a totally arbitrary threshold (kind of a like a birthday), but it's nice to track progress and celebrate milestones and that's a big sounding round number to stop, raise a glass and say "well done!" and "keep up the good work".</p>

	<figure class="captioned-image">
		<img src="/media/2024/Leo_Toasting_meme_banner.jpg">
	</figure>

	<p>Speaking of keeping up the good work: You can join a growing number of others in helping to support the work on Servo directly by donating through <a href="https://github.com/sponsors/servo">GitHub sponsors</a> or our <a href="https://opencollective.com/servo">open collective</a>.  The Servo Technical Steering Committee collectively discusses how to prioritize the spending of available funds in <a href="https://github.com/servo/project/blob/main/governance/tsc/README.md">the public monthly calls</a>. You can also contribute code, reviews and other effort <a href="https://github.com/servo/servo/">via the Servo GitHub repository</a>.  Let's see how quickly we can reach 1.4 million :)</p>

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[What makes it exciting?]]></title>
            <link>https://bkardell.com/blog/IsThisExciting.html</link>
            <guid>https://bkardell.com/blog/IsThisExciting.html</guid>
            <pubDate>Thu, 29 Aug 2024 04:00:00 GMT</pubDate>
            <description><![CDATA[Some thoughts on the things that we get excited about, or don't - and why.]]></description>
            <content:encoded><![CDATA[
  <h1 class="contextual-heading" style="font-size: 2rem;">What makes it exciting?</h1>
  <p class="segue">Some thoughts on the things that we get excited about, or don't - and why.</p>
  <p>Hey, check this out... </p>
  <figure class="captioned-image"> 
  	<img src="/media/2024/kiosk-mode-or-embedded.png" alt="">
  </figure>
  <p>That's Igalia's website running in Google Chrome in kiosk mode. In kiosk mode there is no surrounding "chrome" and so no rendered <em>controls</em>. It has none of that stuff that we normally associate with "browsers" (tabs, back/forward/refresh buttons, a URL bar, etc)</p>
  <p>In fact, while I say that that's Google Chrome running in kiosk mode, it could just as well be <em>embedded</em> browser, like <a href="https://wpewebkit.org">WPEWebKit</a> which has no built in controls. Is it? </p>
  <p>I'm not telling 😏. </p>
  <p>But, it doesn't really matter: I'm just using it to set up the question of whether you feel like that is a <em>browser</em>? And perhaps whether WPEWebKit excites you as a <em>browser</em>? There's no "right" answer.</p>
  <p>Ok, hold that thought, and look at this...</p>
  <figure class="captioned-image">
  	<img src="/media/2024/webkit-mini.png" alt="">
  </figure>
  <p>This is the webkit.org site running in WebKit mini-browser. It isn't Safari, it is just... er... WebKit. Is it a browser?</p>
  <p>On the one hand, it's right there in the name, right? It's a Mini...<em>browser</em>. And, it does have the most important controls.</p>
  <p>Still, you can't download it as a finished product, you have to build it. And no one thinks you should use this as your daily browser. Does it capture your attention as a browser?</p>
  <p>Probably not?</p>
  <p>Ok, now what about this:</p>
  <figure class="captioned-image">
  	<img src="/media/2024/ladybird.jpeg" alt="">
  </figure>
  <p>That's ladybird. Yes, that's exciting, right?</p>
  <p>I mean, I <em>totally</em> agree...</p>
  <p>But the reason it's exciting has almost nothing to do with it being a <em>browser</em>. The Ladybird browser is hardly more than the mini-browser, in fact. It's purpose it the same and how you get it is the same. What makes it <em>exciting</em> is that it's based on a novel <em>engine</em>.</p>
  <p>That said, excitement isn't currently (or probably for the foreseeable future) of the form "because we can actually <em>use</em> that browser day to day". Unlike in the mini-browsers of the others, there is a lot left to do here and the long tail and tricky bits of the web that are needed are... well, a lot, and tricky. They also have this pesky issue where the more people use your browser, the more bugs and unwritten rules you find you have to manage, all without breaking something else. So, Ladybird's got a long way to get to a place where you can practically use it -- but it is <em>exciting</em>.</p>
  <p>Anyway, I asked some people a while back if they were <em>as</em> excited about Servo and they said "well, but it's not a <em>browser</em>". </p>
  <figure class="captioned-image">
  	<img src="/media/2024/batman-thinking.png" alt="Batman, thinking...">
  	<figcaption>Hmmmmm...</figcaption>
  </figure>
  <p>And, indeed, recently someone from the Servo community created a GitHub repo which <em>will be</em> a browser based on Servo (named <a href="https://github.com/versotile-org/verso">Verso</a> - great name!) and the crowd seemingly <em>did</em> go wild on that (double the points of almost any other Servo related post on the orange website), despite the fact that at the time, it was effectively still a mostly-not-function repo.</p>
  <p>So, anyway... I just wanted to step back and say... </p>
  <section class="sectioning">
    <h2 class="contextual-heading" style="font-size: 2.5rem;">Are you not entertained?</h2>
    <figure class="captioned-image">
    	<img src="/media/2024/servo-mini.png" alt="">
    </figure>
    <p>That's the Servo mini-browser running 3 tabs. And you know how I got it? I went to servo.org, downloaded it, installed it and launched it. I can currently use keyboard commands to launch and close tabs. It's also open source, so anyone could in theory have a better downstream one (maybe Verso?) or help grow a browser in Servo itself (more like Firefox, I guess).</p>
    <p>So... Is Servo a browser?</p>
    <p>I mean... no. But also... yes and it's super exciting.</p>
    <p>You should be excited about it, I think. </p>
    <p>You can help support it with some funding through <a href="https://github.com/sponsors/servo">GitHub</a> or <a href="https://opencollective.com/servo">Open Collective</a> (wealthy donors and business support is welcome too :)).  How to choose and prioritize the work funded by donations is decided through collective discussions on the <a href="https://github.com/servo/project/blob/main/governance/tsc/README.md">public monthly calls of the Servo Technical Steering Committee</a>.</p>
  </section>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[927: Thoughts on a Global Design System]]></title>
            <link>https://bkardell.com/blog/927.html</link>
            <guid>https://bkardell.com/blog/927.html</guid>
            <pubDate>Thu, 18 Jul 2024 04:00:00 GMT</pubDate>
            <description><![CDATA[My thoughts on "A Global Design System" as is being discussed in OpenUI.]]></description>
            <content:encoded><![CDATA[
    <h1 class="contextual-heading" style="font-size: 2rem;">927: Thoughts on a Global Design System</h1>
    <p class="segue">My thoughts on "A Global Design System" as is being discussed in OpenUI.</p>
    
    

    <p>As you may or may not be aware, there's been recent discussion in OpenUI, brought forward by an effort by my fellow Pittsburgher Brad Frost, about the group taking on the effort of creating a <a href="https://bradfrost.com/blog/post/a-global-design-system/">global design system</a>.</p>


    <p>First, let me say that the problem that Brad describes is real, and also not new.  He and I have discussed this in the past as well.  I've spent a lot (the majority maybe) of my career (which began in the 90s) working on projects that were either using, evaluating or making their own common controls.</p>


    <section class="sectioning">
        <h2 class="contextual-heading" style="font-size: 2.5rem;">So much wasted energy</h2>
        <p>While explaining this, Brad frequently notes that inventing and reinventing the same things over and over wastes an enormous amount of human potential. We could be spending that time better.</p>

        <p>I mean... Yes.  I agree.</p>

        <p>But, even more than that, the time spent re-inventing is only part of the story.  The status quo is good for approximately no one.  It also has multiplicative effects far beyond just the actual reinvention..</p>

        <p>There might be 100 toolkits/component libraries which combined have 100k worth of invested hours, and yeah, that's a huge amount of time... Those hours are also <em>wildly</em> skewed. 1 might have 10x or even 100x the thought, care, review and testing than another.</p>

        <p>But while there might be thousands of people spending time re-inventing, there are <em>millions of authors</em> who need components - and so many are spending at least a few hours, or maybe in some cases days searching for suitable components.  I've been involved in corporate evaluations that were weeks of time.  And <strong><em>it's hard</em> to evaluate them</strong> and make good choices that consider accessibility, responsiveness, design, and internationalization.  It is not only time-consuming, we often don't have the skills to do it. That is, after all, one of the reasons we want them: So that we <em>don't</em> each have to know all that stuff.</p>

        <p>But then, how do we expect authors make a good choice?</p>

        <p>Sometimes the ones with the least effort put into them can have a great looking web site, nice documentation, charismatic promotion, or be somehow associated with a big tech company.  Too often we wind up choosing components by proxy and just assuming that something else must mean it's good, and will last a long time.  However, history has not borne that out — see the various component toolkits and design systems from even big orgs like Microsoft and Google, for example, that fell by the wayside.
        </p>

        <p>But yeah - multiply that time out... What all of this currently creates is bad all around.  All of the millions of developers looking and ultimately unable to make well-informed choices is probably tens of millions of hours, by comparison.</p>

        <p>In the end, many give up and re-implement again, making the problem even worse.</p>

        <p>Each one might introduce tiny variations and accidentally invent something subtly new and create new challenges for users that we'll spend years sorting out too.</p>

        <p>Ugh. It's bad.  We should want a better future, and <strong>we should act on that</strong>.</p>
    </section>

    <section class="sectioning">
        <h2 class="contextual-heading" style="font-size: 2.5rem;">Imagining a Better Future</h2>
        <p>Here's where I believe we get into trouble though:  We have to be clear on what are we imagining, and whether it is practical/pragmatic to deliver adequate value in a reasonable timeframe.</p>

        <section class="sectioning">
            <h3 class="contextual-heading" style="font-size: 3rem;">Native HTML?</h3>
            <p>We <em>could</em>, for example, choose to imagine that HTML can be given a great and complete set of elements representing a complete UI toolkit.  In addition to correcting all of the issues with the elements we've added so far, this means adding powerful grids connected to data, tabsets, notifications, carousels, charts, and so on. </p>

            <p>Can it? Eventually, maybe, but I hope it is not controversial to suggest that it is extremely unlikely that we could accomplish this with the necessary qualities and in a reasonable timeframe. There's just no information or insight I have that gives me hope that focusing only on that scenario is a good idea.</p>

            <p>This is a good end-goal for many components, but it's not where to start.  It's hard and time consuming and gated on very specific and limited participation of a small number of people. HTML itself moves slow, on purpose.</p>

            <figure class="container"><svg viewBox="0 0 500 30" version="1.1" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet">
              <line x1="0" y1="20" x2="500" y2="20" stroke="black"></line>
             <circle cx="496" cy="20" r="4"></circle>
            </svg>
              <figcaption>I think HTML is at the end of 99 other steps...</figcaption>
            </figure>

            <p><em>The real question, I believe, is about improving how we get there, and deliver iterative partial value along the way</em>.</p>
        </section>

        <section class="sectioning">
            <h3 class="contextual-heading" style="font-size: 3rem;">New Web Components Reference Implementations?</h3>

            <p>It's been suggested that we could work on a single standard with a reference implementation for each component.</p>

            <p>I <em>do</em> believe that ultimately this is a good goal, but I'd like to suggest that it's not where to start either.</p> 

            <p>The challenges to this are less than trying to add it to HTML in some ways, it doesn't require browser vendorts to act in concert, sure.  We can iterate on it, sure.  But the challenges are still huge and trading knowns for unknowns.</p>

            <p>Instead of needing to convince 3 browser vendors to act in concert, we have to convince several UI kit vendors and developers to participate.  We also have to convince everyone to use it and try to avoid XKCD 927 territory...</p>

            <figure>
                <img src="https://imgs.xkcd.com/comics/standards.png">
                <figcaption><a href="https://xkcd.com/927/">XKCD 927</a> 
                        <div>Situation: There are 14 Competing Standards</div>
                        <div>Person 1: 14? Ridiculous! We need to develop one universal standard that covers everyone's use cases!</div>
                        <div>Person 2: Yeah!</div>
                        <div>Situation: There are 15 Competing Standards</div>
                </figcaption>
            </figure>


            <p>This is exacerbated by the fact that it won't come all at once.  It'll still be a non-trivial amount of time before we have a whole library of components which could reasonably be promoted for use.  It still requires people with expertise (probably many of the same people as if it were native) to participate for reviewing accessibility, usability, internationalization, etc.  In practice, there are just very finite resources available to put toward large scale, long term cooperation. Practically speaking, it seems likely we could only focus on a couple of components at a time.</p>

            <p>Let's say we finish and ship the first component: Tabs.  Can we really call it a global design system if it has just one component?  Won't that really limit who can/will adopt it?</p>

            <section class="sectioning">
                <h4 class="contextual-heading" style="font-size: 3.5rem;">Adopt, modify and bless an library</h4>

                <p>It's been suggested that we could take up a library as a kind of a 'donation' project to provide a starting point.  Specifically, maintainers from Shoelace/Web Awesome (also formerly MS components) have volunteered components for this purpose. Not as a "this is the thing" but a "this is a start".  That would give us a nice leap forward.</p>

                <p>Yeah, it would.</p>

                <p>Except... Doesn't it raise a lot of questions we have to answer anyways?</p>

                <p>First, but maybe not as importantly: Why that one? That goes to legitimacy.  We should be able to explain why this is not just the first attractive looking opportunity that presented itself.</p>

                <p>More importantly, it seems to me that the rest of the situation decribed above remains largely unchanged.  We can't seriously promote that until it is deemed "good", and practically speaking it seems that we will approve them individually, not as a library.  So, can't we define how we think it should work before we worry about picking a library?</p>

                <p>The most obvious thing we could have ever done that with was jQuery, and we didn't.</p>


                <figure class="container"><svg viewBox="0 0 500 30" version="1.1" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet">
                  <line x1="0" y1="20" x2="500" y2="20" stroke="black"></line>
                 <circle cx="375" cy="20" r="4"></circle>
                </svg>
                  <figcaption>I think that a library of reference implementations that we can agree to and recommend is still very far along the timeline...</figcaption>
                </figure>


                <p><em>The real question, I believe, is about improving how we get there, and deliver iterative partial value along the way</em>.</p>

                <p>We still don't have a great way to <em>evolve</em> the web - but I keep saying that I think we should.</p>

            </section>
    </section>

    <section class="sectioning">
        <h3 class="contextual-heading" style="font-size: 3rem;">How I think we could get there...</h3>

        <p>This is what I want more than anything:  A plan to get there. Reasonable steps of value along the way, comparatively quickly.</p>

        <p>It is effectively what I thought in 2013-2014 too.  I suggested to the W3C Advisory Committee that we needed to rethink how we approach standards to include this sort of idea, which could work <a href="https://bkardell.com/blog/Dropping-The-F-Bomb-On-Standards.html">more like languages/dictionaries</a>.  I tried to suggest the W3C should create such a process/listing/review process.</p>

        <p>What follows is a vague outline of what I imagine:</p>

        <p>I'd like to create a central place where we lay out some new rules and a process where components, in a basic form that we agree to (it is as a module, should it use shadow dom or not, etc) can be submitted.</p>

        <figure class="container"><svg viewBox="0 0 500 30" version="1.1" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet">
          <line x1="0" y1="20" x2="500" y2="20" stroke="black"></line>
         <circle cx="50" cy="20" r="4"></circle>
        </svg>
          <figcaption>What are the criteria? That's the first few steps...</figcaption>
        </figure>

        <p>We'd define some criteria gating submission, first with IP/license agreements we agree to, possibly some kind of bar for contributors or stars or something, but mainly: A commitment of participation in this new process, especially from experts. Honestly, participation is a bigger part of the limiting factor than anyone really imagines.</p>


        <p>Once submitted it would undergo wide review and get some kind of 'verification stamps' for each kind (a11y, i18n, etc).</p>

        <p>For this reason, I would really love to try to include the authors of government tools here.  They are legally mandated and funded to solve the problem already and seem highly incentivized to participate.  A collective of government efforts also lends immediate credibility and sense of independence to it.</p>

        <p>To me, ideally, we would begin with a call for components/participation.</p>

        <figure class="container"><svg viewBox="0 0 500 30" version="1.1" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet">
          <line x1="0" y1="20" x2="500" y2="20" stroke="black"></line>
         <circle cx="100" cy="20" r="4"></circle>
        </svg>
          <figcaption>A call for particpation/submissions...</figcaption>
        </figure>
    </section>

    <section class="sectioning">
        <h3 class="contextual-heading" style="font-size: 3rem;">You might have noticed...</h3>

        <p>You might have noticed that I didn't answer the question of "how do we pick one?"  That's because I think that's like 99 steps down the road and will come naturally.</p>

        <p>We can get a set of people who can contribute tabs, and a set of people who can review, and we can all discuss several of them at the same time.  We can begin to lay out conformance criteria, and give each one little 'conformance stamps' along the way.  Inevitably we can more easily get implementations to align and develop universal definitions and tests -- new stamps to be had.</p>
        
        <figure class="container"><svg viewBox="0 0 500 30" version="1.1" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet">
          <line x1="0" y1="20" x2="500" y2="20" stroke="black"></line>
         <circle cx="200" cy="20" r="4"></circle>
         <circle cx="240" cy="20" r="4"></circle>
         <circle cx="270" cy="20" r="4"></circle>
        </svg>
          <figcaption>Component get conformance stamps...</figcaption>
        </figure>

        <p>For authors, along the way, there's a nice central catalog somewhere, like webcomponents.org, but better. You'll know those have been submitted, and which ones have which conformance stamps.  Maybe there isn't a 'the one', yet.  But, it's ok?  You have a smaller set, and the information you really need to choose one.  Maybe all 3 of them are ... fine?</p>

        <p>That's not the worst thing, we can sit back and evaluate it for a while while already saving ourselves collectively millions of hours and our users a lot of pain.</p>


        <p>In fact, collecting data and a little variation is <em>good</em>. Probably, they continue to align, or one begins to be the clearer winner.</p>

        <figure class="container"><svg viewBox="0 0 500 30" version="1.1" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet">
          <line x1="0" y1="20" x2="500" y2="20" stroke="black"></line>
         <circle cx="325" cy="20" r="4"></circle>
        </svg>
          <figcaption>We have very well defined, portable criteria for testing and more or less 1 definition...</figcaption>
        </figure>

         <p>And, that's the point: As we go we would slowly, but without stopping major progress at any point.  Even if nothing more happens, each of those steps has had real value.  No one has just <em>wasted</em> time.</p>

        <p>Then, maybe we can get somewhere where we have a single reference implementation of all of those things - or even a standard almost identical to them.</p>

        <figure class="container"><svg viewBox="0 0 500 30" version="1.1" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet">
          <line x1="0" y1="20" x2="500" y2="20" stroke="black"></line>
         <circle cx="400" cy="20" r="4"></circle>
        </svg>
          <figcaption>We have a true global reference implementation... Should we bake it into HTML?</figcaption>
        </figure>

        <p>In any case, that's how I would prefer to approach it. I wouldn't call it a "global design system" to start, because I  wouldn't even start out assuming there would be only one of anything initially... But eventually.</p>

    </section>

</section>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Improving the WPT Dashboard]]></title>
            <link>https://bkardell.com/blog/WPT-Dashboard.html</link>
            <guid>https://bkardell.com/blog/WPT-Dashboard.html</guid>
            <pubDate>Tue, 21 May 2024 04:00:00 GMT</pubDate>
            <description><![CDATA[Thoughts on things I'd like to see as part of the WPT dashboard.]]></description>
            <content:encoded><![CDATA[
    <h1 class="contextual-heading" style="font-size: 2rem;">Improving the WPT Dashboard</h1>
    <p class="segue">Thoughts on things I'd like to see as part of the WPT dashboard.</p>
    
    <p>In my <a href="https://bkardell.com/blog/BSF.html">last post</a> I dug into the data behind <a href="https://wpt.fyi/">wpt.fyi</a>'s Browser Specific Failures chart (below) and the site's general reporting capabilities. </p>
    <figure class="captioned-image">
        <img src="/media/2024/bsf.png" alt="">
    </figure>
    <p>I suggested that linking to data on specifically what failed (at least what is queryable) would probably be really helpful (perhaps some kind of "understanding this chart" link as well).</p>
    <p>While these aren't part of the design today, I think this is mainly because the primary audience of that chart was originally mainly the vendors themselves. It was intended to allow for certain simple kinds of tracking, planning and prioritization. For example "Let's set a goal to not let the failure exceed such and such threshold" or "Let's aim to lower the failures by X this quarter". It wasn't critical to link to the tests because the audience knew how to interrogate the data - the purpose was just to get a quantifiable number you can easily report on.</p>
    <p>But, now we see this chart shared a lot and it's pretty clear that people are curious so we should probably adjust it for the wider audience.</p>
    <p>Additionally though, that's also only a single view of the data, and I'd like to argue that we could some other improvements too.</p>
    <section class="sectioning">
        <h2 class="contextual-heading" style="font-size: 2.5rem;">Prioritization</h2>
        <p>BSF made the observation that if we can identify a test that fails in only 1 browser, then that browser's team can easily prioritize something that has significant impact. That browser is the boat anchor holding things back. Except, it's not quite that cut and dry in reality.</p>
        <p>Real management of software projects is hard. I think that anyone who's worked on software projects can relate to this, at least a bit, if we take some time to consider all of the things that go into choosing how to apply our limited resources. Obviously, not all failures are equal - especially when we're talking about projects which are a quarter of a century old. The reality is that all of that decisioning and prioritization is happening independently across different organizations, with different views on the web, different budgets, different legacy challenges, etc. </p>
        <p>That's where I think there are some things to learn from Interop.</p>
    </section>
    <section class="sectioning">
        <h2 class="contextual-heading" style="font-size: 2.5rem;">What I learned from Interop Is...</h2>
        <p>If you think about it, Interop is about trying to achieve thematically, basically the same thing as BSF: Make more things "green across the board". But it is a <em>very</em> different thing than BSF. </p>
        <p>I've really learned a lot from the process of helping organize Interop every year about why this takes so long to happen naturally. There are so many limits and signals and opinions. One of the things we do as part of the process is to take all of the submissions and independently order them in terms of what we think are their priorities. There are 6 organizations doing that: Apple, Bocoup, Google, Igalia, Microsoft and Mozilla. How many do you think chose the same #1? The answer is 0.</p>
        <p>It really highlights how waiting for all of the stars to align by chance winds up often being a painfully slow process and full of problems. </p>
        <p>However, a <em>huge</em> part of interop is dedicated to dealing with the stuff BSF doesn't really consider - aligning agreement on:
            1. what features are most important
            2. which tests regarding those are valid/important
            3. are all the spec questions really answered?
            4. is this actually (hopefully) achievable in the next year?</p>
        <p>In that, I believe it has been extremely successful in creating way more "green across the board" than anything else. I think this is true beyond even what is <em>officially</em> part of Interop, because we're all able to kind of discuss and see where others are probably going to invest in work because things that were important for them didn't make the cut.</p>
        <p>In a way, each year is sort of like doing what we used to do with "CSS2" and "HTML4"... Creating a more focused discussion that is the goal floor, not the ceiling.</p>
        <details class="note">
            <summary>It's not enough...</summary>
            Sure, I believe this gives us <em>much better results</em> by helping alignment. I think this is obvious given how rapid and smoothly we've found so much high-quality alignment in recent years. However, there's something I want stress in all of this: Choosing what to prioritize is also inherently choosing what to collectively <em>deprioritize</em>. It is inevitable because <strong>at the end of the day there is just too much.</strong>
            <p>The only <em>real</em> solution to this problem is wider investment in the platform and, ultimately, almost certainly, changing how we fund it.</p>
        </details>
        <section class="sectioning">
            <h3 class="contextual-heading" style="font-size: 3rem;">Alignment vs Passing</h3>
            <p>Interop <em>also</em> showed us that a simple, individual pass/fail can be incomplete and misleading. If 3 browsers reach a point of passing 50% of measured tests, the number of tests that pass in <em>all</em> browsers might actually be 0, as illustrated in the table below...</p>
            <figure class="captioned-image">
                <table>
                    <tbody><tr>
                        <th>Chrome
                        </th>
                        <th>Firefox</th>
                        <th>WebKit</th>
                    </tr>
                    <tr>
                        <td>✅</td>
                        <td></td>
                        <td>✅</td>
                    </tr>
                    <tr>
                        <td></td>
                        <td>✅</td>
                        <td>✅</td>
                    </tr>
                    <tr>
                        <td>✅</td>
                        <td></td>
                        <td>✅</td>
                    </tr>
                    <tr>
                        <td></td>
                        <td>✅</td>
                        <td>✅</td>
                    </tr>
                    <tr>
                        <td>✅</td>
                        <td></td>
                        <td>✅</td>
                    </tr>
                    <tr>
                        <td></td>
                        <td>✅</td>
                        <td></td>
                    </tr>
                    <tr>
                        <td>✅</td>
                        <td></td>
                        <td></td>
                    </tr>
                    <tr>
                        <td></td>
                        <td>✅</td>
                        <td></td>
                    </tr>
                    <tr>
                        <td>✅</td>
                        <td></td>
                        <td></td>
                    </tr>
                    <tr>
                        <td></td>
                        <td>✅</td>
                        <td></td>
                    </tr>
                </tbody></table>
                <figcaption>Lots of tests pass, but not even one passes universally!</figcaption>
            </figure>
            <p>In fact, here's a <a href="https://wpt.fyi/results/svg/types/scripted?q=svg&amp;run_id=5095555055484928&amp;run_id=5174632751824896&amp;run_id=5155156954185728&amp;run_id=5128162447196160">real world example of exactly this kind of misleading view in a set of SVG tests</a>. If we look at the numbers across the bottom:</p>
            <ul>
                <li>chrome: 166 / 191 </li>
                <li>edge: 166 / 191 </li>
                <li>firefox: 175 / 191 </li>
                <li>safari: 132 / 191</li>
            </ul>
            <p>It's not <em>terrible</em> if you're only looking at those numbers. But, if you scroll down through that table you'll see that there are ragged failures all over that. In fact, <strong><em>only 52 of 189 are "green across the board"</em></strong>! </p>
            <p>We can only realistically solve by having a more holistic view and working together. BSF is just the slice that is theoretically actionable individually, not everything that matters.</p>
            <section class="sectioning">
                <h4 class="contextual-heading" style="font-size: 3.5rem;">What about a focus on Universally Passing?</h4>
                <p>In the Interop project we track the difference above as its own data point: The Interop number, and we put it as a separate column in the test tables:</p>
                <figure class="captioned-image">
                    <img src="/media/2024/interop-table.png" alt="a table containing a column for each individual browser scores on different features, and a column for the number that pass in all">
                    <figcaption>The interop column reports how many tests pass on <em>all</em> of the tracked browsers</figcaption>
                </figure>
                <p>Similarly, we track it over time:</p>
                <figure class="captioned-image">
                    <img src="/media/2024/interop-graph.png" alt="">
                    <figcaption>A graph showing scores of each browser over time as well as an "interop line"</figcaption>
                </figure>
                <p>Could we learn something from this? Wouldn't something like that be great to have <em>in general</em>? </p>
                <p>For example, in the wpt.fyi tables? Now, it couldn't look just like that because those numbers are all in percentages, and this only really works because the interop process carefully sets a governance process for defining/agreeing to what the tests are. It would be enough to add a column to the table in the same form, something like this:</p>
                <figure class="captioned-image">
                    <img src="/media/2024/universally-passing-table.png" alt="">
                </figure>
                <p>That might help us uncover situations like the SVG one above and present opportunites <em>like</em> interop for us to collectively decide to try to address that.</p>
                <p>Similarly, we could track it over time. Sort of the opposite of BSF. We want to see the simple number of subtests <em>passing</em> in browsers and it should always be going up (even as new tests are added, no existing ones should <em>stop</em> passing - those are just more opportunities to go up). Further, ideally the Universally Passing number shouldn't ever be drawing significantly further away from that over time or we're making less of the platform universal. That is, you could see, over time when we are cooperating better, and when we are not. </p>
                <p>We do better when we are. In my mind, that's an explicit goal, and this would be a view into it.</p>
            </section>
        </section>
    </section>
]]></content:encoded>
        </item>
    </channel>
</rss>