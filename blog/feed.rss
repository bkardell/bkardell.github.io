<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>bkardell.com rss feed</title>
        <link>http://bkardell.com/</link>
        <description>Just the bkardell.com rss feed</description>
        <lastBuildDate>Wed, 03 Apr 2024 20:23:10 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>awesome mix</generator>
        <image>
            <title>bkardell.com rss feed</title>
            <url>http://bkardell.com/profile.jpg</url>
            <link>http://bkardell.com/</link>
        </image>
        <copyright>All rights reserved 2018, Brian Kardell</copyright>
        <atom:link href="https://bkardell.com/blog/feed.atom" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[The Blessing of the Strings]]></title>
            <link>https://bkardell.com/blog/blessing-strings.html</link>
            <guid>https://bkardell.com/blog/blessing-strings.html</guid>
            <pubDate>Wed, 03 Apr 2024 04:00:00 GMT</pubDate>
            <description><![CDATA[Trusted Types have been a proposal by Google for quite some time at this point, but it's currently getting a lot of attention and work in all browsers (Igalia is working on implementations in WebKit and Gecko, sponsored by Salesforce and Google, respectively). I've been looking at it a lot and thought it's probably something worth writing about.]]></description>
            <content:encoded><![CDATA[
    <h1 class="contextual-heading" style="font-size: 2rem;">The Blessing of the Strings</h1>
    <p class="segue">Trusted Types have been a proposal by Google for quite some time at this point, but it's currently getting a lot of attention and work in all browsers (Igalia is working on implementations in WebKit and Gecko, sponsored by Salesforce and Google, respectively). I've been looking at it a lot and thought it's probably something worth writing about.</p>
    <script src="../prism.js"></script>
    <link rel="stylesheet" href="../prism.css">
    
    <p>The Trusted Types proposal rides atop Content Security Policy (CSP) and allows website maintainers to say "require trusted-types". Once required, lots of the Web Platform's dangerous API surfaces ("sinks") which currently require a string will now require... well, a <em>different</em> type.</p>
    <p><code>myElement.innerHTML</code> (and a whole lot of other APIs) for example, would now require a <code>TrustedHTML</code> object instead of just a string.</p>
    <p>You can think of <code>TrustedHTML</code> as an interface indicating that a string has been somehow specially "blessed" as safe... Sanitized.</p>
    <figure class="captioned-image">
    	<img src="/media/2024/holy.gif" style="width:100%;max-width:800px;" alt="the Holy Hand grenade scene from Monty Python's Holy Grail">
    	<figcaption>And Saint Attila raised the string up on high, saying, 'O Lord, bless this thy string, that with it we may trust that it is free of XSS...' <a href="https://www.youtube.com/watch?v=xOrgLj9lOwk">[ref]</a>.</figcaption>
    </figure>
    <section class="sectioning">
        <h2 class="contextual-heading" id="blessing-strings" style="font-size: 2.5rem;">Granting Blessings</h2>
        <p>The interesting thing about this is how one goes about blessing strings, and how this changes the dynamics of development and safety.</p>
        <p>To start with, there is a new global <code>trustedTypes</code> object (available in both window and workers) with a method called <code>.createPolicy</code> which can be used to create "policies" for blessing various kinds of input (<code>createHTML</code>, <code>createScript</code>, and <code>createScriptURL</code>). Trusted Types comes with the concept of a <em>default</em> policy, and the ability for you to register a specially named "default"...</p>
        <pre><code class="language-javascript">//returns a policy, but you 
// don't really need to do anything 
// with the default one
trustedTypes.createPolicy(
    "default", 
    {
      createHTML: s =&gt; { 
          return DOMPurify.sanitize(s) 
      } 
    }
);</code></pre>
        <p>And now, the practical upshot is that <em>all attempts to set HTML will be sanitized</em>... So if there's some code that tries to do:</p>
        <pre><code class="language-javascript">// if str contains
// `&amp;lt;img src="no" onerror="&lt;em&gt;dangerous code&lt;/em&gt;" &amp;gt;`;
target.innerHTML =  str;</code></pre>
        <p>Then the <code>onerror</code> attribute will be <em>automatically</em> stripped (sanitized) before <code>.innerHTML</code> gets it.</p>
        
        <p><strong><em>Hey that's pretty cool!</em></strong></p>

        <figure class="captioned-image">
    		<img src="/media/2024/monty.gif" style="width:100%;max-width:400px;" alt="one of the scenes where the castle guard is mocking arthur and his men">
    		<figcaption>It's almost like you just put defenses around all that stuff and can just peer over the wall at would be attackers and make faces at them....</figcaption>
    	</figure>

        <p>But wait... can't someone come along then and just create a more lenient policy called default?</p>
        
        <p>No! That will throw an exception!</p>

        <p>Also, you don't <em>have</em> to create a default. If you don't, and someone tries to use one of those methods to assign a string, it will throw.</p>

        <p>The only thing this enforcement cares about is that it is one of these "blessed" types. Website administrators can also provide (in the header) the name of 1 or more policies which should be created. </p>

        <p>Any attempts to define a policy not in that list will throw (it's a bit more complicated than that, see <a href="#name-your-policy">Name your Policy</a> below). Let's imagine that in the header we specified that a policy named "sanitize" is allowed to be created. </p>
        <p>Maybe you can see some of why that starts to get really interesting. In order to use any of those APIs (at all), you'd need access to a policy in order to bless the string. But because the policy which can do that blessing is a handle, it's up to you what code you give it to... </p>
        <pre><code class="language-javascript">{
  const sanitizerPolicy = 
      trustedTypes.createPolicy(
        "sanitize",
        {
          createHTML: s =&gt; { 
            return DOMPurify.sanitize(s) 
        } 
  );


    // give someOtherModule access to a sanitization policy
    someOtherModule.init(sanitizerPolicy)

    // yetAnotherModule can't even sanitize, any use of those
    // APIs will throw
    yetAnotherModule.foo()
}

// Anything out here also doesn't have 
// access to a sanitization policy
</code></pre>
        <p>What's interesting about this is that the thing doing the trusting on the client, is actually <em>on</em> the client as well - but the pattern ensures that this becomes a considerably more finite problem. It is much easier to audit whether the "trust" is warranted. That is, we can look at the above to see that there is only one policy and it only supports creating HTML. We can see that the trust there is placed in DOMPurify, and even that amount of trust is only provided to select modules.</p>
        <p>Finally, most importantly: It is a pattern that is machine enforceable. Anything that tries to use any of those APIs without a blessed string (a Trusted Type) will fail... Unless you ask it not to.</p>
    </section>
    <section class="sectioning">
        <h2 class="contextual-heading" id="dont-throw-just-help" style="font-size: 2.5rem;">Don't Throw, Just Help?</h2>
        <p>Shutting down all of those APIs after the fact is hard because all of those dangerous APIs are also really useful and therefore widely used. As I said earlier, auditing to find and understand all uses of them all is pretty difficult. Chances are pretty good that there might just be a lot more unsafe stuff floating around in your site than you expected.</p>
        <p>Instead of <code>Content-Security-Policy</code> CSP headers, you can send <code>Content-Security-Policy-Report-Only</code> and include a directive that includes <code>report-to /csp-violation-report-endpoint/</code> where <code>/csp-violation-report-endpoint/</code> is an endpoint path (on the same origin). If set, whenever violations occur, browsers should send a request to <a href="https://w3c.github.io/webappsec-csp/#report-violation">report a violation</a> to that endpoint (JSON formatted with lots of data). </p>
        <p>The general idea is that it is then pretty easy to turn this on and monitor your site to discover where you might have some problems, and begin to work through them. This should be especially good for your QA environment. Just keep in mind that the report doesn't actually prevent the potentially bad things from happening, it just lets you know they exist.</p>
    </section>
    <section class="sectioning">
        <h2 class="contextual-heading" id="shouldnt-there-just-be-a-standard-santizer-too" style="font-size: 2.5rem;">Shouldn't there just <em>be</em> a standard santizer too?</h2>
        <p><a href="https://github.com/WICG/sanitizer-api">Yes!! That is also a thing that is being worked on</a>.</p>
    </section>
    <section class="sectioning">
        <h2 class="contextual-heading" id="name-your-policy" style="font-size: 2.5rem;">Name Your Policy</h2>
        <p>I'm not going to lie, I found CSP/headers to be both a little confusing to read and to figure out their relationships. You might see a header set up to report only....</p>
        <p><code>Content-Security-Policy-Report-Only: report-uri /csp-violation-report-endpoint; default-src 'self'; require-trusted-types-for 'script'; trusted-types one two;</code></p>
        <p>Believe it or not that's a fairly simple one. Basically though, you split it up on semi-colons and each of those is a directive. The directive has a name like "report-uri" followed by whitespace and then a list of values (potentially containing only 1) which are whitespace separated. There are also keyword values which are quoted.</p>
        <p>So, the last two parts of this are about Trusted Types. The first, <code>require-trusted-types-for</code> is about what gets some kind of enforcement and really the only thing you can put there currently is the keyword <code>'script'</code>. The second, <code>trusted-types</code> is about what policies can be created.</p>
        <p>Note that I said "some kind of enforcement" because the above is "report only" which means those things will report, but not actually throw, while if we just change the name of the header from <code>Content-Security-Policy-Report-Only</code> to <code>Content-Security-Policy</code> lots of things might start throwing - which didn't greatly help my exploration. So, here's a little table that might help..</p>
        <table>
            <thead>
                <tr>
                    <th>If the directives are...</th>
                    <th>then...</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><em>(missing)</em></td>
                    <td>You can create whatever policies you want (except duplicates), but they aren't enforced in any way.</td>
                </tr>
                <tr>
                    <td><code>require-trusted-types-for 'script';</code></td>
                    <td>You can create whatever policies you want (except duplicates), and they are enforced. All attempts to assign strings to those sinks will throw. This means if you create a policy named default, it will 'bless' strings through that automatically, but it also means anyone can create any policy to 'bless' strings too.</td>
                </tr>
                <tr>
                    <td><code>trusted-types</code></td>
                    <td>You cannot create any policies whatsoever. Attempts to will throw.</td>
                </tr>
                <tr>
                    <td><code>trusted-types 'none'</code></td>
                    <td>Same as with no value.</td>
                </tr>
                <tr>
                    <td><code>trusted-types a b</code></td>
                    <td>You can call <code>createPolicy</code> with names 'a' and 'b' exactly once. Attempts to call with other names (including 'default'), or repeatedly will throw.</td>
                </tr>
                <tr>
                    <td><code>trusted-types default</code></td>
                    <td>You can call <code>createPolicy</code> with names 'default' exactly once. Attempts to call with other names, or repeatedly will throw.</td>
                </tr>
                <tr>
                    <td><code>require-trusted-types-for 'script'; trusted-types a</code></td>
                    <td>You can call <code>createPolicy</code> with names 'a' exactly once. Attempts to call with other names (including default), or repeatedly will throw. All attempts to assign strings to those sinks will throw unless they are 'blessed' from a function in a policy named 'a'</td>
                </tr>
            </tbody>
        </table>
    </section>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How We Fund the Web Ecosystem]]></title>
            <link>https://bkardell.com/blog/HowWeFund.html</link>
            <guid>https://bkardell.com/blog/HowWeFund.html</guid>
            <pubDate>Wed, 13 Mar 2024 04:00:00 GMT</pubDate>
            <description><![CDATA[On Tuesday (March 12th, 2024), Robin Berjon and Eric Meyer and I organized, led and scribed a session during W3C breakouts day about how we fund the web ecosystem…]]></description>
            <content:encoded><![CDATA[
	<h1 class="contextual-heading" style="font-size: 2rem;">How We Fund the Web Ecosystem</h1>
	<p class="segue">On Tuesday (March 12th, 2024), Robin Berjon and Eric Meyer and I organized, led and scribed a session during W3C breakouts day about how we fund the web ecosystem…</p>


	<p>Every year the W3C has a week long giant set of in-person meetings called TPAC. A nice feature of those meetings has always been “Breakouts Day” which is a day where people can propose sessions about pretty much anything and we try to organize a schedule around the ones that seem interesting to enough people.</p>

	<p>This year, the W3C decided to try a second Breakouts Day that is not at the same time as TPAC, and was purely online.</p>

	<p>Over the last several years, I’ve written several pieces about different aspects of the health of the web ecosystem and led a podcast series with quite a few episodes about that.  In those pieces I’ve argued that while the web ecosystem has become the infrastructure for nearly everything, our models for funding and prioritization of the last 20 years have proven not only inadequate, and problematic, but ultimately fragile and cannot last.  The only questions, I’ve argued, are how soon and what happens next. Are we ready for it? (hint: no).</p>


	<p>So, I talked to a few people and we proposed this as a topic. It was well attended. We began with a short presentation (we made a very detailed outline together, but credit goes to Robin for the <a href="https://bkardell.com/media/2024/How_We_Fund_The_Web.pdf" rel="noopener">great slides</a>).</p>

	<p>We organized the presentation into sort of 2 parts. First I presented explaining the problems and why we believe this requires our attention and action.  First we have to admit that we have a problem, right?  And that this is a problem that <em>we</em> should be concerned with… If not us, who?  If not now, when?</p>

	<p>Then I outlined that there are many possible solutions and elements of solutions that we can discuss (or try), but all of them share some common elements:</p>

	<ol>
		<li>We need a way to take in common money, and a way to actually encourage money into the pot.</li>
		<li>We need a way to <em>efficiently</em> and <em>fairly</em> prioritize the money in the pot toward actual work.</li>
	</ol>

	<p>I highlighted that there are existing things we can already try (and are trying), and that we should really start trying more.</p>

	<p>After this, Robin presented a bigger possible vision we tried to lay out with lots of still fuzzy areas and questions - but effectively: We create an institution which is (through one of a few possibilities) able to compel participation into a system which enforces more sustainable (and fairer) characteristics which guarantee support for the infrastructure of the web.</p>

	<p>You can get a very good idea of what was actually presented from the <a href="https://github.com/w3c/breakouts-day-2024/issues/20#issuecomment-1992539848" rel="noopener">detailed outline</a> that we shared too.</p>

	<p>But all of this was only the initial short presentation which I think was only maybe 5-10 minutes.  The rest was the point of the breakout: Actual discussion.</p>

	<p>I think it was <em>very</em> positive actually.  The main thing that impressed me is that there was seemingly no push back or questioning at at all in the premise.  We agree with the fundamentals - that as I explained in <a href="https://bkardell.com/blog/Webrise.html" rel="noopener">Webrise</a>, it’s fragile from this perspective, and we need to care about it.</p>

	<p>Rick Beyers (from Google, but not speaking for Google) mentioned what they observed in Chromium contributions and that they also had concerns about diversity, both in terms of contributions to a single engine, and multiple engines.  He also mentioned that Chromium was spinning up a new collective idea (not yet announced).</p>

	<p>Just this morning, we helped launch the <a href="https://servo.org/blog/2024/03/12/sponsoring-servo/" rel="noopener">Servo collective</a>.  The timing is purely coincidental.  I’d also note that in part of my presentation I mentioned exploring ways that governments can incentivize and forgot to mention that there have been interesting developments in some open source funding happening this way recently, and to note that the White House recently made a statement that <a href="https://www.whitehouse.gov/oncd/briefing-room/2024/02/26/press-release-technical-report/" rel="noopener">Future Software Should Be Memory Safe</a>.  If anyone has a good ‘in’ at the White House please make the case that if you want to know a good place to invest to be sure a lot of future stuff is memory safe, it’s probably browsers - and especially the one written in Rust :). The collective would be happy to accept the White House’s check.</p>

	<p>There were also some interesting questions about whether Web Monetization could be related to this, or is just a wholly separate problem, about how the advertising model is exceptionally progressive, and where other investment comes from currently.</p>
	<p>Happily <a href="https://www.w3.org/2024/03/12-ecosystem-funding-minutes.html" rel="noopener">minutes are available</a> if you’re interested - and we’ll be trying to organize some immediate discussions on where we go from here through <a href="https://github.com/darobin/wise/" rel="noopener">this repo</a> which also has <a href="https://darobin.github.io/wise/" rel="noopener">a rough outline of how one solution might work</a>.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The Darkening]]></title>
            <link>https://bkardell.com/blog/darkening.html</link>
            <guid>https://bkardell.com/blog/darkening.html</guid>
            <pubDate>Mon, 11 Mar 2024 04:00:00 GMT</pubDate>
            <description><![CDATA[Some additions to my half-light library for styling Shadow DOM.]]></description>
            <content:encoded><![CDATA[ 
	<h1 class="contextual-heading" style="font-size: 2rem;">The Darkening</h1>
	<p class="segue">Some additions to my half-light library for styling Shadow DOM.</p> 

	<p>In case you haven't followed, a number of my recent posts have been thinking about how Shadow DOM falls short, and how we can can use the tools we have today to explore potential solutions and improvements.  This has led to good feedback and quick iteration on a tiny library called <a href="https://github.com/bkardell/half-light">half-light</a>.</p>

	<p>This library lets page authors selectively "push" styles down into shadow roots as adopted <code>@layer</code>s. It plugs into CSS's media queries, and allows selectivity on both ends: Which styles and which specific shadow roots.  I'm not going to recap the whole concept and interface here because it would just be regurgitating the stuff that's already in the link above.  What I want to write about is the latest set of improvements to half-light.</p>
 
	<section class="sectioning">
		<h2 class="contextual-heading" style="font-size: 2.5rem;">no-light</h2>
		<p>An important point "feature" of half-light is that it doesn't require web components to be built in a special way in order to achieve this.  Alternative/Previous ideas required elements to subclass a special element, for example, to say "Yes, I am styleable from above".  However, I don't believe that that seems practical for reasons I explained in <a href="https://bkardell.com/blog/LovelyTrees.html">Lovely Trees</a>.  Effectively, it is very difficult to grow iterations on that approach naturally, and there are already so many wonderful components out there which a number of people say "I wish I could use, but alas I cannot provide some basic styling".  This library just lets them do exactly that: Provide styling from the outside (with some caveats below), to see what it's like to actually live with that possibility.  Do they love it?  Ultimately regret it?</p>

		<p>I don't believe that this is some kind of breach of contract to allow that kind of styling from the outside in open shadow roots. The simple fact that the library has to do hardly anything shows just how easy it is, technically, for any page author to do it already today.  No "new powers" have been added.</p>

		<p>It's harder to make this case with closed shadow roots.  While it is entirely possible for page authors to take control of closed shadow roots too, they have to achieve this by changing their nature and, effectively saying "sorry, no your closed shadow roots will be open roots in my page".  However much I am not a fan of the closed roots, I do think that someone who made their root closed gave a pretty strong opinion that you're not supposed to touch the inside, even if you think you want to.</p>

		<p>What I hadn't considered is that open roots could exist inside of closed roots, and with my pattern you could still have styled them the same way. That felt wrong, so I fixed that by making the whole subtree "darkened". That is, half-light can't get any light past it.</p>

		<p>I also made a check for an attribute (or property) <em>called</em> <code>darkened</code> which can achieve this for a light DOM as well.  You set it on the shadow host.  Thus, if you write <code>myElement.darkened = true</code> or <code>&lt;my-element darkened&gt;</code> it will prevent half-light from applying to the whole subtree.  That trick can be used by both custom elements and page authors directly if they find it helpful. Similarly, it's benign otherwise, so component authors can start adding it if they want to and whether page authors happen to be using half-light or not doesn't matter.</p>
	</section>

	<section class="sectioning">
		<h2 class="contextual-heading" style="font-size: 2.5rem;">Optimizations</h2>

		<p>The very first edition of half-light was a little greedy as to processing and probably was doing a little too much work.  I didn't hear anyone say that they actually experienced a problem, but it was clearly not as efficient as it could be, so, I improved that generally.</p>

		<p>But I also built half-light to be a little resilient to where in the head it was loaded, and to conveniently to work with dev tools.  That means you can go ahead and live-change the CSS its aware of that and will propagate changes down into your components.  This is achieved via a MutationObserver.</p>

		<p>Now, in practice I don't think this is likely to be much of a problem in most cases. Once the document has settled down enough to start rendering, I'm not sure how heavy head mutations are these days - but it seems pretty reasonable to be able to say "you don't have to keep observing", so I added that ability too.  If you include the 
		<code>disable-live-half-light</code> attribute on the script tag that you use to include half-light, it will stop monitoring.</p>

		<p>There's a practical upshot to that as well: This means it can also disengage some book keeping which technically leaks memory (this won't practically cause you issues on your blog or something, it's really mainly if you are doing a lot of dynamic stuff in a long-lived application).</p>

	</section>
	<section class="sectioning">
		<h2 class="contextual-heading" style="font-size: 2.5rem;">Feedback and evolution</h2>
		<p>What I've appreciated most about this effort is the feedback and iteration.  It's kind of amazing to look over such a brief period of time all of the evolution and improvements toward solving a problem.  I hope that more and more people find it valuable to explore and let us know how it goes.  Real world experimentation and feedback is so valuable toward ultimately developing a standard solution.  Thanks to everyone who has reached out, filed issues, written a blog post, or discussed it on a podcast.</p>

		<p>If you haven't already, please leave an emoji or a comment on this <a href="https://github.com/bkardell/half-light/issues/1">github issue</a> to help me collect sentiment toward a solution like this in a central place.</p>
	</section>

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[StyleSheet Parfait]]></title>
            <link>https://bkardell.com/blog/parfait.html</link>
            <guid>https://bkardell.com/blog/parfait.html</guid>
            <pubDate>Mon, 12 Feb 2024 05:00:00 GMT</pubDate>
            <description><![CDATA[In this post I'll talk about some interesting things (some people might pronounce this 'footguns') around adoptedStyleSheets, conversations and thoughts around open styling problems and @layer.]]></description>
            <content:encoded><![CDATA[
	<h1 class="contextual-heading" style="font-size: 2rem;">StyleSheet Parfait</h1>
	<p class="segue">In this post I'll talk about some interesting things (some people might pronounce this 'footguns') around adoptedStyleSheets, conversations and thoughts around open styling problems and @layer.</p>

	<script src="../prism.js"></script>
	<link rel="stylesheet" href="../prism.css">

	<p>If you're not familiar with adopted stylesheets, they're a way that your shadow roots can <em>share</em> literal styesheet instances by reference.  That's a cool idea, right?  If you have 10 <code>fancy-input</code>s on the same page, it makes no sense for <em>each</em> of them to have their own copy of the whole stylesheet.</p>

	<p>It's fairly early days for this still (in standards and support terms, at least) and we'll put improvements on top of this, but for now it is a pretty basic JavaScript API: Every shadow root now has an <code>.adoptedStyleSheets</code> property, which is an array.  You can push stylesheets onto it or just assign an array of stylesheets.  Currently those stylesheets have to be instances  created via the recently introduced constructor <code>new CSSStyleSheet()</code>.</p>

	<p>Cool.</p>

	<p><a href="https://github.com/sorvell">Steve Orvell</a> opened an issue suggesting that I make <a href="https://github.com/bkardell/half-light">half-light</a> use adopted stylesheets.  Sure, why not.  In practice what this really saves is mainly the parse time, since browsers are pretty good at optimizing this otherwise, but that's still important and, in fact, it made the code more concise as well.</p>

	<section class="sectioning">
		<h2 class="contextual-heading" style="font-size: 2.5rem;">Whoopsie</h2>
		<p>However, there is an important bit about adopted stylesheets that I forgot about when I implemented this initially (which is strange because I am on the record discussing it in CSSWG): adopted stylesheets are treated as if they come <em>after</em> any stylesheets in the (shadow) root.</p>

		<p>Previously, half-light (and earlier experiments) took great care to put stylesheets from the outer page <em>before</em> any that the component itself. That seems right to me, and what the adopted stylesheets were doing now with adopted stylesheets seemed wrong...</p>
	</section>


	<section class="sectioning">
		<h2 class="contextual-heading" style="font-size: 2.5rem;">Enter: Layers</h2>
		<p>A solution to this newly created problem that's fairly easy is to wrap the rules that are adopted with <code>@layer</code>.  Then, if your component has a style element, the rules in there will, by default, win.  And that's true even if the rules that the page author pushed in had higher specificity!  That's a pretty nice improvement. If some code helps you understand, here's a pen that illustrates it all:</p>

		<p class="codepen" data-height="300" data-default-tab="html,result" data-slug-hash="ExMdWdq" data-user="briankardell" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">
		  <span>See the Pen <a href="https://codepen.io/briankardell/pen/ExMdWdq">
		  adoptedstylesheets and layers</a> by вкαя∂εℓℓ (<a href="https://codepen.io/briankardell">@briankardell</a>)
		  on <a href="https://codepen.io">CodePen</a>.</span>
		</p>
		<script async="" src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
	</section>

	<section class="sectioning">
		<h2 class="contextual-heading" style="font-size: 2.5rem;">Layers... Like an ogre.</h2>
		<a href="https://www.igalia.com/chats/a-lighter-shade-of-dom">Eric and I recently did a podcast on the Open Styleable shadow roots topic with Mia</a>.  Some of the thoughts she shared, and later conversations that followed with <a href="https://westbrookjohnson.com/">Westbrook</a> and <a href="https://nolanlawson.com/">Nolan</a>,  convinced me to try to explore how we could use layers in half-light.<p></p>

		<p>It had me thinking that the way that adopted stylesheets and layers both work seems to allow that we could develop some kind of 'shadow styling protocol' here.  Maybe the simplest way to do this is to just give the layer a well-known name: I called it <code>--crossroot</code></p>

		<p>Now, when a page author uses half-light to set a style like:</p> 

		<pre><code class="language-css">@media --crossroot { 
  h1 { ... }
}</code></pre>

		<p>This is adopted into shadow roots as:</p>

		<pre><code class="language-css">@layer --crossroot { 
  h1 { ... }
}</code></pre>

		<p>That is a lower layer than anything in the default layer of a component's shadow root (both stylesheets or adopted stylesheets).</p>

		<p>The maybe interesting part this adds is that it means  that the component itself can consciously manage it's layers if it chooses to do so!  For example..</p>

		<pre><code class="language-javascript">this.shadowRoot.innerHTML = `
  &lt;style&gt;
    @layer base, --crossroot, main;
    ... 
    /* add rules to those layers  */
    ... 
  &lt;/style&gt;
  ${some_html}
`</code></pre>

		<p>If that sounds a little confusing, it's really not too bad - what it means is that, going from least to most specific, rules would evaluate roughly like:</p>

		<ol>
			<li>User Agent styles.</li>
			<li>Page authored rules that inherit into the Shadow DOM.</li>
			<li>@layers (including <code>--crossroot</code> half-light provides) in the shadow</li>
			<li>Rules in style elements in the shadow that aren't in a layer.</li>
		</ol> 

	</section>

	<section class="sectioning">
		<h2 class="contextual-heading" style="font-size: 2.5rem;">Combining ideas...</h2>
		<p>There was also some unrelated feedback from Nolan that this approach was a non-starter for some use cases - like pushing Bootstrap down to all of the shadow roots.  The previous shadow-boxing library would have supported that better. Luckily, though we've built this on Media Queries, so CSS has that pretty well figured out - all we have to do is add support to half-light to make Media Queries work in link and style tags (in the head) as well.  Easy enough, and I agree that's a good improvement.  So, now you can also write markup like this:</p>

		<pre><code class="language-html">&lt;link rel="stylesheet" href="../prism.css" media="screen, --crossroot"&gt;&lt;/link&gt;

&lt;!-- or to target shadows of specific elements, add a selector... --&gt;
&lt;link rel="stylesheet" href="../prism.css" media="screen, (--crossroot x-foo)"&gt;&lt;/link&gt;</code></pre>
	</section>


	<p>So... That's it, this is all in half-light now... And guess what? <em>It's still only 95 lines of code</em>.  Thanks for all the feedback so far!  So, wdyt?
		Don't forget to leave me an indication of how you're feeling about it with an emoji (and/or comment) on the <a href="https://github.com/bkardell/half-light/issues/1">Emoji sentiment or short comment issue</a>.</p>
	
	<p class="thanksTo">Very special thanks to everyone who has commented and shared thoughts constructively along the way, even when they might not agree.  If you actually voted in the emoji sentiment poll: ❤. Thanks especially to <a href="https://www.miriamsuzanne.com/">Mia</a> who has been great to discuss/review and improve ideas with.</p>

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[half-light]]></title>
            <link>https://bkardell.com/blog/half-light.html</link>
            <guid>https://bkardell.com/blog/half-light.html</guid>
            <pubDate>Thu, 25 Jan 2024 05:00:00 GMT</pubDate>
            <description><![CDATA[Evolving ideas on "open stylable" issues, a new proposal.]]></description>
            <content:encoded><![CDATA[
	<h1 class="contextual-heading" style="font-size: 2rem;">half-light</h1>
	<p class="segue">Evolving ideas on "open stylable" issues, a new proposal.</p>

	<script src="../prism.js"></script>
	<link rel="stylesheet" href="../prism.css">

	<p>Recently I wrote a piece called <a href="https://bkardell.com/blog/LovelyTrees.html">Lovely Trees</a> in which I described how the Shadow DOM puts a lot of people off because the use case it's designed around thus far aren't the one most authors feel like they have. That's a real shame because there is a lot of usefulness there that is just lost.  People seem to want something just a little <em>less</em> shadowy.</p>

	<p>However, there are <em>several</em> slightly different visions for what it is we want, and how to achieve it.  Each offers significantly different details and implications.</p>

	<p>In that piece I also noted that we can make any of these possible through script in order to explore the space, gain practical experience with and iterate on until we at least have a pretty good idea what will work really well.</p>

	<p>To this end I offered a library that I called "shadow-boxing" with several possible "modes" authors could explore.</p>

	<section class="sectioning">
		<h2 class="contextual-heading" style="font-size: 2.5rem;">"Feels like the wrong place"</h2>
		<p>Many people seemed to think this would be way better expressed in CSS itself somehow, rather than metadata in your HTML.</p>

		<p>There is a long history here. Originally there were combinators for crossing the shadow boundary, but these were problematic and removed.</p>

		<p>However, the fact that this kept coming up in different ways made me continue to discuss and bounce possible ideas around.  I made a few rough takes, shared them with some people, and thanks to <a href="https://www.miriamsuzanne.com/">Mia</a> and <a href="https://daverupert.com/">Dave Rupert</a> for some good comments and discussion, today I'm adding a separate library which I think will make people much happier.</p>
	</section>

	<section class="sectioning">
		<h2 class="contextual-heading" style="font-size: 2.5rem;">Take 2: <code>half-light.js</code></h2>
		<p><code><a href="https://github.com/bkardell/half-light">half-light.js</a></code> is a very tiny (~100 LoC) library that lets you express styles for shadow doms in your page <em>in your CSS</em> (it should be CSS inline or linked in the head). You can specify whether those rules apply to both your page and shadow roots, or just shadow roots, or just certain shadow roots, etc. Let's have a look.. All of these make use of CSS <code>@media</code> rules containing a custom <code>--crossroot</code> which can be functional. The easiest way to understand it is with code, let's have a look...</p>

		<section class="sectioning">
			<h3 class="contextual-heading" style="font-size: 3rem;">Rules for shadows, not the page...</h3>
			<p>This applies to <code>&lt;h1&gt;</code>'s in <em>all shadow roots</em>, but not in the light DOM of the page itself.</p>
			
			<pre><code class="language-css">@media --crossroot { 
  h1 { ... }
}</code></pre>

			<p>Authors can also provide a selector filter to specify which elements should have their shadow roots affected.  This can be, for example, a tag list. In the example below, it will style the <code>&lt;h2&gt;</code>'s in the shadows of <code>&lt;x-foo&gt;</code> or <code>&lt;x-bar&gt;</code> elements, and not to those in the light DOM of your page itself...</p>
			<pre><code class="language-css">@media --crossroot(x-foo, x-bar) { 
  h2 { ... }
}</code></pre>

		<p>Most selectors should work there, so you could also <em>exclude</em> if you prefer. The example below will style the <code>&lt;h3&gt;</code>'s in the shadows of all elements <em>except</em> those of <code>&lt;x-bat&gt;</code> elements ...</p>

		<pre><code class="language-css">@media --crossroot(:not(x-bat)) {
  h3 { ... } 
}</code></pre>
		</section>
		
		<section class="sectioning">
			<h3 class="contextual-heading" style="font-size: 3rem;">Rules for shadows, <em>and</em> the page...</h3>

			<p>It's really just a trick of <code>@media</code> that we're tapping into: Begin any of the examples above with <code>screen,</code> and put the whole <code>--crossroot</code> in parenthesis. The example below styles all the <code>&lt;h1&gt;</code>'s in both your light DOM and all shadows...

		</p><pre><code class="language-css">@media screen, (--crossroot) { 
  h1 { ... }
}</code></pre>
		
			<p>Or, to use the exclusion route from above, but to apply to all <code>&lt;h3&gt;</code>'s in the page, or of shadows of all elements <em>except</em> those of <code>&lt;x-bat&gt;</code> elements ...</p>

		<pre><code class="language-css">@media screen, (--crossroot(:not(x-bat))) {
  h3 { ... } 
}</code></pre>

		</section>

		<p>Play with it... There's a pen below. Once you've got an impression, give me your impression, even with a simple <a href="https://github.com/bkardell/half-light/issues/1">Emoji sentiment or short comment here</a>.</p>

		<p class="codepen" data-height="300" data-default-tab="html,result" data-slug-hash="LYazzmL" data-user="briankardell" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">
  <span>See the Pen <a href="https://codepen.io/briankardell/pen/LYazzmL">
  halflight</a> by вкαя∂εℓℓ (<a href="https://codepen.io/briankardell">@briankardell</a>)
  on <a href="https://codepen.io">CodePen</a>.</span>
</p>
<script async="" src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>

	</section>

	<section class="sectioning">
		<h2 class="contextual-heading" style="font-size: 2.5rem;">Is this a proposal?</h2>
		<p>No, not yet, it's just a library that should allow us to experiment with something "close enough" to what "features" a real proposal might need to support, and very vaguely what it might look like.</p>

		<p>A real proposal, if it came from this, would certainly not use this syntax, which is simply trying to strike a balance between being totally valid and easy to process, and "close enough" for us to get an idea if it's got the right moving parts.</p>
	</section>
	


]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[What's Good?]]></title>
            <link>https://bkardell.com/blog/WhatsGood.html</link>
            <guid>https://bkardell.com/blog/WhatsGood.html</guid>
            <pubDate>Wed, 03 Jan 2024 05:00:00 GMT</pubDate>
            <description><![CDATA[I think this is a question worth asking, let me explain why…]]></description>
            <content:encoded><![CDATA[
	<h1 class="contextual-heading" style="font-size: 2rem;">What's Good?</h1>
	<p class="segue">I think this is a question worth asking, let me explain why…</p>

	<p>A few times a year, every developer advocate will ask developers about what developing features they're interested in or what pain points they experience most. That is a good thing. We should keep doing that.</p>
  
  	<p>While we don't often present it in this light, one thing this does is inform prioritization. The simple truth is that resources are way too finite, so we have to look for good signals about what should be prioritized.</p>
  
  	<p>I think it's similarly important to have feedback on the other end too: What's your satisfaction like on the web features you've gotten in the last few years? Can you name any that you use all the time? Can you name some that you over-estimated your need for? Something that you thought you needed/wanted but then ultimately didn't end up using so much? Something that you had high hopes for, but failed you?</p>
  
  	<p>But why ask that?</p>
  	
  	<p>Well, it seems quite probable that there are things we can learn from that.</p>
  
  	<p>Maybe we can look at where we should have listened more, or pushed more. Maybe we can learn things about the processes that successful things took that unsuccessful things didn't (did they go through WICG? Were there polyfills? Origin trials? Did they stay in experimental builds behind a flag for a long time? Were they done at roughly the same time in all browsers?). Can we compare the amount of resources and time required between them? Maybe those things could also inform prioritization somehow?</p>

	<p>Normally, around this time, I'd have wrapped up working on the latest Web Almanac and there would be lots of data flying at me which scratches a little bit of the kind of itch I've got - but this year we didn't do one, so I find myself wondering: How are people getting along with all of those things we've been delivering since 2019 or so?</p>

  	<p>So, let me know!</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Lovely Trees]]></title>
            <link>https://bkardell.com/blog/LovelyTrees.html</link>
            <guid>https://bkardell.com/blog/LovelyTrees.html</guid>
            <pubDate>Tue, 26 Dec 2023 05:00:00 GMT</pubDate>
            <description><![CDATA[You've read lots of Web Components posts lately, I think this one is a little different.]]></description>
            <content:encoded><![CDATA[ 
	<h1 class="contextual-heading" style="font-size: 2rem;">Lovely Trees</h1>
	<p class="segue">You've read lots of Web Components posts lately, I think this one is a little different.</p> 
	<script src="../prism.js"></script>
	<link rel="stylesheet" href="../prism.css">
	
   <p>
		I'm <em>thrilled</em> that so many people are suddenly learning about, and falling in love with Custom Elements separately from Shadow DOM. It is, in my mind, best to learn about Custom Elements first anyways. And, if your goals are to use it in some simple, static sites, or blogs - then, well, that might be all you need.  It's just a better version of what we used to do with jQuery, really.  
	</p>  

	<p>But…</p>

	<p>Here is where I want to say something about Shadow DOM, and I expect it will go something like this:</p>


	<figure class="captioned-image optional">
		<video src="/media/PB_Fire_Swamp.mp4" controls="" style="max-width: 600px; width: 100%; display: block; margin: 2rem auto 3rem;"></video>
		<figcaption>It's not so bad.</figcaption>
	</figure>

	<p>
		But, stick with me.  It won't be that bad, I promise.
	</p>

	<p>
		The simple light DOM way is, yes, good.  But it creates a poor illusion if the component manipulates the DOM.  That illusion is easy shattered as neither component authors, nor page authors can reason well about the tree in potentially important ways, because it is a transform of the page author's tree to some tree of the component author's making, with no designed coordination. And then, <em>everything</em> starts breaking down quickly, not just CSS. Script too, uses selectors and tree relationships.  Where there is any kind of real complexity: It's cases like that that Shadow DOM <em>should</em> serve us very well for. 
	</p>

	<section class="sectioning">
		<h2 class="contextual-heading" style="font-size: 2.5rem;">But it falls short</h2>
		<p>
			Despite this, it seems that for plenty of people who have tried, Shadow DOM is falling short.  All of the posts I'm reading show that people are so put off by the current state that they'd flipped the bit until now on Custom Elements too.  When one steps back and looks at all of the calls (from people who have been trying to use Shadow DOM for a while) for a few variations of "open style-able roots", or "slots in the light DOM", or "ability to use IDREFs across shadow roots" - or even the fact that we're bringing back scoped styles: It really starts to seem like maybe we've missed (or at least not recognized or prioritized)  multiple important use cases along the way.
		</p>
		
		<p>
			I think this is because we've focused mainly on giving developers a capability to build and share something that is pretty similar to native widgets - and that's not what most people think they need.  Indeed, I think we've failed to wrestle with differences that seem sharp. 
		</p>

		<p>
			For example: Browsers are <em>extremely</em> careful to not expose their "Shadow DOM" internals because the consequences of doing so could be dire. If they didn't, then when browsers try to push an update that makes some otherwise innocuous, even welcome change, everything goes wrong. Users suddenly experience problems in tons of apps.  Maybe they suddenly can't activate a control.  Perhaps that prevents them from getting the information they need for their bank, or their insurance.  It can be a very big deal.  People start filing bugs on those websites and writing hate filled blog posts.  Devs from those websites do the same in kind.  And so on.  No one wins.</p>

		<p>
			However, code libraries (of custom elements or anything else) are different. It's sites themselves, not the browser or the library, that are in charge of deploying upgrades to libraries, which involves testing and avoids the worst surprises. Neither the site author, nor the library author, it seems, generally requires the kind of extreme upgrade guarantees that current Shadow DOM is built to grant.  Largely, it seems they would provide other trade-offs instead.
		</p>

		<p>
			The design of Shadow DOM also hasn't focused enough on collaboration.  I believe (as I have since the beginning) that <em>most</em> uses of Shadow DOM are about some kind of collaboration -- more about preventing <a href="https://bkardell.com/blog/FriendlyFire.html">friendly fire</a>.  But what we've created is perhaps more like a programming language with only <code>private</code> — no <code>protected</code> or "friendly" concepts.
		</p>

		<p>
			If you think that all of this sounds kind of damning of standards, it's more complicated than it seems.  There are no cow paths to pave here.  But, what if there were? Because, at this point, it sure seems like there could be.
		</p>

		<p><em>I'm not saying I'd like to build a summer home there, but the Shadow Trees are actually quite lovely</em>.</p>
	</section>

	

	<section class="sectioning">
		<h2 class="contextual-heading" style="font-size: 2.5rem;">Treading Some Cow Paths</h2>
		<p>
			<em>Lots</em> of coordination is totally possible, it simply requires jumping through hoops and isn't standard.  The community can, probably should, spend some time proving out and living with a few different ideas.  That would make standardizing one of them much easier (standards are at their best, in my take, when they are mostly <a href="https://bkardell.com/blog/Dropping-The-F-Bomb-On-Standards.html">writing down the slang that developed and was tested naturally, in the wild</a>). Better still it taps into the creative power of the commons to get us <em>functional</em> solutions now, rather than making us wait forever for solutions that might not arrive for years - or even ever! This sort of approach is how we got things like <code>.querySelector()</code> <code>.matches()</code> and <code>.closest()</code>.
		</p>

		<p>
			Today, if you create a Shadow DOM, style rules inside don't leak out to the rest of the page, and don't "leak in" from the page.  There are a lot of people who dislike that second part.  Tricky thing is, they don't all seem to dislike it the same way, or want the same kind of solution(s).  What we need here, I think, is practical experience and, luckily, we have the raw materials to try solutions to some of this in the wild ourselves and see what pains it soothes (and probably, also realize some that it causes). 
		</p>

		<p>
			For example, here are few major potential philosophies: 
		</p> 
		<dl>
			<dt>Let components decide</dt> 
			<dd>Authors extend a new base class which then automatically pulls down a copy of some, or all of the styles provided by the page.</dd>

			<dt>Let page authors decide</dt> 
			<dd>Lets the page say "these are the base, simple styles for all components" regardless of what they extend. I think this is kind of key because one of the really nice things about custom elements is that many of us might like to share and find and mix and match, which is pretty hard to do while also basing a solution on extending a particular base class.</dd>
		</dl>


		<p>But which one is "right"? All of them feel more natural for some use cases/scenarios. All of them are probably just terrible for others. Maybe there are more variants! Maybe what we need is a "pick one, that's how your page will work" idea.  Or, maybe we need all of them to work!  I think we can only learn through use and experimentation, so...</p>

		<p><a href="https://github.com/bkardell/shadow-boxing/">Here's a tiny library to let you try each those things</a>!</p>

		<p><a href="https://shadow-boxing.glitch.me/">And a little glitch you can poke around, inspect, remix, play with, and tweak</a>.</p>

		<p>Go on... Pick one. Try it. Remix the glitch, make a pen, try it on your site. Love it or hate it.  Let it inspire better ideas.  But, most importantly - share your thoughts - regardless! Did it do good things for you? Was it tricky? I want to know!</p>

	</section>
		


]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The Effects of Nuclear Maths]]></title>
            <link>https://bkardell.com/blog/NuclearMaths.html</link>
            <guid>https://bkardell.com/blog/NuclearMaths.html</guid>
            <pubDate>Fri, 01 Dec 2023 05:00:00 GMT</pubDate>
            <description><![CDATA[Carrying on Eric's work on “The Effects of Nuclear Weapons” - with native MathML.]]></description>
            <content:encoded><![CDATA[
  <h1 class="contextual-heading" style="font-size: 2rem;">The Effects of Nuclear Maths</h1>
  <p class="segue">Carrying on Eric's work on “The Effects of Nuclear Weapons” - with native MathML.</p>
  <script src="../prism.js"></script>
  <link rel="stylesheet" href="../prism.css">
  
  <p>As I have explained a few times since first writing about it in <a href="https://bkardell.com/blog/Math.html" target="_blank" rel="noopener">Harold Crick and the Web Platform</a> in Jan 2019, I'm interested in MathML (and SVG).  I'm interested in them because they are historically special: integrated into the HTML specification/parser even.  Additionally, their lineage makes them unnecessarily weird and "other".  Worse, they're dramatically under-invested in/de-prioritized.  I believe all that really needs to change.  Note that none of that says that <em>I</em> need MathML, personally, for the stuff that I write - but rather that I understand why it is that way and the importance <em>for the web at large</em> (and society).  This is also the first time I've helped advocate for a thing I didn't have a bunch of first-hand experience with.</p>

  <p>Since then, I've worked with the Math Community Group to create MathML-Core to resolve those historical issues, get a W3C TAG review, an implementation in Chromium (also done by Igalians) and recharter the MathML Working Group (which I now co-chair).</p>

  <p>For authors, the status of things is <em>way better</em>.  Practically speaking, you can use MathML and render some pretty darn nice looking maths for a whole lot of stuff.  Some of the integrations with CSS specifically aren't aligned, but they didn't exist at all before, so maybe that’s ok.</p>

  <p>Despite all of this, it seems lots of people and systems still use MathJax to render as SVG, sometimes also rendering MathML for accessibility reasons.  But, why? It's not great for performance if you don't have to.</p>

  <p>I really wanted to better understand.  So I decided to tackle some test projects myself and to take you all along with me by documenting what I do, as I do it.</p>

  <section id="Nuking-all-the-MathJax" class="sectioning">
    <h2 class="contextual-heading" style="font-size: 2.5rem;">Nuking all the MathJax (references)</h2>

    <p>Last year, my colleague Eric Meyer wrote a piece about some work he'd been doing on a passion project <a href="https://meyerweb.com/eric/thoughts/2022/08/09/recreating-the-effects-of-nuclear-weapons-for-the-web/" target="_blank" rel="noopener">Recreating “The Effects of Nuclear Weapons” for the Web</a>, in which they bring a famous book to the web as faithfully as they can.</p>

    <p>This piece includes a lot of math - hundreds of equations.</p>
    <p>You can see <a href="https://atomicarchive.com/resources/documents/effects/glasstone-dolan/" target="_blank" rel="noopener">the result of their work on atomicarchive.com</a>.  The first two chapters aren't so math heavy, but Chapter 3 alone contains 179 equations!</p>
<p>It looks good!</p>

    <p>Luckily, <a href="https://github.com/chrisgriffith/glasstone-dolan" target="_blank" rel="noopener">it's on github</a>.</p>

    <p>Oh hey! These are just static HTML files!</p>
    
    <p>Inside, I see that each file contains a block like this:</p>

    <pre><code class="language-html">&lt;script id="MathJax-script" async src="mathjax/tex-chtml.js"&gt;&lt;/script&gt;
&lt;script&gt;
MathJax = {
  tex: {
    inlineMath: [['$', '$'], ['\\(', '\\)']]
  },
  svg: {
    fontCache: 'global'
  }
};
MathJax.Hub.Config({
  CommonHTML: {
    linebreaks: {automatic: true}
  }
});
&lt;/script&gt;</code></pre>

<p>These lines configure how MathJax works, including <em>how it is identified in the page</em>.  If you scan through the source of, say, chapter 3, you will see lots of things like this:</p>

<figure>
<pre><code class="language-html">&lt;p&gt;where $c_0$ is the ambient speed of sound (ahead of the shock front), $p$ is the peak overpressure (behind the shock front), $P_0$ is the ambient pressure (ahead of the shock), and $\gamma$ is the ratio of the specific heats of the medium, i.e., air. If $\gamma$ is taken as 1.4, which is the value at moderate temperatures, the equation for the shock velocity becomes&lt;/p&gt;
    
\[
U = c_0 \left( 1 + \frac{6p}{7P_0} \right)^{1/2},
\]</code></pre>

<figcaption>Code sample from chapter 3</figcaption>
</figure>

<p>What you can see here is that the text is peppered with those delimiters from the configuration, and inside is TeX.</p>


<div class="note" id="People-don’t-like-writing-ML">
  <strong>People don't like writing *ML</strong>
  <p>I just want to take a minute and address the elephant in the room: Most people don't want to write MathML, and that's not as damning as it sounds.  Case in point, as I am writing this post, I am not writing <code>&lt;p&gt;</code> and <code>&lt;h1&gt;</code> and <code>&lt;section&gt;</code>s and so on…  I'm writing markdown, as the gods intended.</p>

  <p>TimBL’s original idea for HTML wasn't that people would write it - it was that machines would write it. His first browser was an editor too - but a relatively basic rich text editor, a lot like the ones you use every day on github issues or a million other places. The very first project Tim did with HTML was the CERN phone book which did all kinds of complicated stuff to dynamically write HTML - the same way we do today.  In fact, it feels like 90% of engineering seems to be transforming strings into other strings: And it's nothing new.  TeX has been around almost as long as I've been alive and it's a fine thing to process.</p>
</div>
  
  <p>This format, of text tokens being anywhere in the document is way more ideally suited to processing on a build or server than on the client.  On the client we'd more ideally work with the tree and manage re-flow and so on.  Here the tree is irrelevant - in the way even -  because there are some conflicting escapes or encodings… But, it's just a string... And there are <em>lots of things that can process that string and turn it into MathML.</em></p>

  <p>My colleague Fred Wang has an open source project called <a href="https://github.com/fred-wang/TeXZilla" target="_blank" rel="noopener">TeXZilla</a>, so I'm going to use that.</p><h2 id="Nuking-the-scripts">Nuking the scripts</h2><p>First thing first, let's get rid of those script tags.  Since they contain the tokens they'd be searching the body for, but well be processing the whole document, they'll just cause problems anyways.</p>

  <p>Ok. Done.</p>

  <p>Next, I checkout the TeXZilla project parallel to my book project and try to use the ‘streamfilter’ which lets me just <code>cat</code> and <code>|</code> (pipe) a file to process it…</p>

  <p></p><pre><code class="terminal"> &gt;cat chapter1.html | node "../../texzilla/node_modules/texzilla/TeXZilla.js" streamfilter</code></pre><p></p>
<p>Hmm… It fails with an error that looks something like this (not exactly if you're following along, this is from a different file):</p>

  <pre><code class="terminal">&gt;cat chapter1.html | node "../../texzilla/node_modules/texzilla/TeXZilla.js" streamfilter

Error: Parse error on line 145:
...}\text{Neutron + }&amp;\!\left\{\enspace
---------------------^
Expecting 'ENDMATH1', got 'COLSEP'
.....
</code></pre>

<p>I don’t know TeX, so this is kind of a mystery to me. I search for the quoted line and have a look. I find some code surrounded by <code>\begin{align}</code>  and <code>\end{align}</code>.  I turn to the interwebs and find some examples where it says  <code>\begin{aligned}</code>  and <code>\end{aligned}</code>, so I try just grep/changing it across the files and, sure enough, it processes further.  Which is right? Who knows - let's move on...</p>

<p>I find a similar error like...</p>

<pre><code class="terminal">Error: Parse error on line 759:
...xt{ rads. } \; \textit{Answer}\]&lt;/asi
-----------------------^
Expecting '{', got 'TEXTARG'</code></pre>

<p>Once again on the interwebs I find some code like <code>Textit{...}</code> (uppercase <code>T</code>) - so, I try that.  Sure enough, it works fine.  Or wait... Does it?  No, it just leaves that code untransformed now.</p>

<p>But… Now we have MathML! At least in some chapters!</p>

<p>With a little more looking, I find that this is a primary sort of TeX thing, it's just a quirk of TeXZilla, and I turn those those <code>textit{...}</code> into <code>mathit{...}</code> and now we're good. Finally.  Burned some time on that, but not too bad.</p>

<p>I encounter two other problems along the way: First, escaping.  The source contains ampersand escapes for a few Unicode characters which aren't a problem when you're accessing it from <code>body.innerText</code> or something maybe, but are a problem here.  Still, it takes only a couple of minutes more to replace them with their actual Unicode counterparts: <code>&amp;phi;</code> ⇒ <code>φ</code>, <code>&amp;lambda;</code> ⇒ Λ, <code>&amp;&amp;times;</code> ⇒ ×).</p>

<p>When I’m done I can send that to a file, something like this…</p>

<p></p><pre><code class="terminal">&gt;cat chapter3.html | node "../../texzilla/node_modules/texzilla/TeXZilla.js" streamfilter &gt; output.html</code></pre><p></p>

<p>And then just open it in a browser.</p>

<p>There are some differences.  MathJax adds a margin to math that's on its own line (block) that isn't there natively.  The math formulas that are ‘tabular’ aren't aligning their text (the <code>=</code>), and the font is maybe a little small.  After a little fooling around, I add this snip to the stylesheet:</p>

<pre><code class="language-css">math[display="block" i] {
  margin: 1rem 0;
}

math {
    font-size: 1rem;
}

mfrac {
    padding-inline-start: 0.275rem;
    padding-inline-end: 0.275rem;
}

mtd {
  text-align: left;
}</code></pre>

<p>And the last problem I hit?  An error in the actual inline TeX in the source, I think, where it was missing a <code>$</code>.  MathJax simply left that un-transformed, just like my previous example because it lacked the closing <code>$</code>, but TeXZilla was all errory about it. I sent <a href="https://github.com/chrisgriffith/glasstone-dolan/pull/64">a pull request</a>, and I guess we'll see.</p>  
<p>And like… that's it.</p>

<p>All in all, the processing time here including learning the tools and figuring out the quirks in a language I'm unfamiliar with is maybe half a day - but that's scattered across short bits of free time here and there.</p>

<p>Is it done? Is it good enough? It definitely needs some proofing to see what I've missed (I'm sure there's some!), and good scrutiny generally, but... It looks pretty good at first glance, right (below)?</p>

<figure class="captioned-image">
    <img src="/media/mathml-and-jax-atomic.png">
    <figcaption>Native MathML on the left, MathJax on the right</figcaption>
</figure>

<p>You can browse it at:</p>
<p><a href="https://bkardell.com/effects-of-nuclear-math/html/" target="_blank" rel="noopener">https://bkardell.com/effects-of-nuclear-math/html/</a>. </p>

<p>And, <a href="https://github.com/bkardell/effects-of-nuclear-math">send me an issue</a> if you find anything that should be improved before I eventually send a pull request, or you see something that looks bad enough that you wouldn't switch to native MathML for this.</p>

<p>But, all in all: I feel like you can make pretty good use of native MathML at this point.</p>
</section>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Let's Play a Game]]></title>
            <link>https://bkardell.com/blog/PriorityGame.html</link>
            <guid>https://bkardell.com/blog/PriorityGame.html</guid>
            <pubDate>Thu, 16 Nov 2023 05:00:00 GMT</pubDate>
            <description><![CDATA[It's Interop 24 planning time!  Let's play a game: Tell me what you prioritize, or don't and why?
	]]></description>
            <content:encoded><![CDATA[
	<h1 class="contextual-heading" style="font-size: 2rem;">Let's Play a Game</h1>
	<p class="segue">It's Interop 24 planning time!  Let's play a game: Tell me what you prioritize, or don't and why?
	</p>

	<p>I've written before about how prioritization is hard.  Just in the most tangible of terms, there are differing finite resources, distributed differently across organizations.  That is, not all teams have the same size or composition, or current availability.  They're all also generally managed and planned independently with several other factors in mind, and in totally different architectures.  That's a big part of what makes standards often take so long to get sorted out to where everyone can just use them without significant concerns.</p>

	<p>Conversely, occasionally we see things ship at what seems by comparison amazing speed.  Sometimes that's a bit of an illusion: They've been brewing and aligning hard parts for years and we're only counting the end bits. But other times it's just because we've aligned.  A nice way to think about this, if you're a developer,  is to compare it to web page performance. If all of the resources just load as discovered and there's no thought put into optimization, things can get really out of control.  When you do some optimization and coordination, you can get things many times faster pretty quickly.  The big difference here is mainly that instead of milliseconds, with standards substitute weeks or something.</p>

	<p>I think that's one of the best things about Interop.  While it isn't a promise by anyone or anything, it does seem to serve as a function to get us to focus together on some things and align - doing that optimization work.</p>

	<p>It's a damned tricky exercise though, I'm not going to lie. There are so many things to consider and align.  I kind of like sharing insight into this because I spent a really long time as a developer myself with a significantly different perspective.  Seeing all of this from the inside the last few years has been really eye-opening.  So, I thought, let's play a game... It might be useful to both of us.</p>

	<p>Below is a list of links to about 90 2024 proposals. It's not carefully complete and I have excluded a few that I personally feel perhaps don't fit the necessary criteria for inclusion.  It would, of course, be a huge time suck for you to spend your unpaid time carefully researching all of them - so that's not the game.  Note that this represents a tiny fraction of the open issues in the platform - so you can start to see how this is challenging.</p>

	<p>So, the game is: Bubble sort as many of these as you can (at least 5-10 would be great) and, optionally, share something back about why you prioritized or de-prioritized something.  That can be in a reply blog post, a few messages on social media of your choice, share a gist... Whatever you like.</p>

	<p>Here's the list (note there is a bit more prose afterward)</p>

	<ol><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/532">MediaCapture device enumeration</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/554">Standardize SVG properties in CSS to support unitless geometry</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/536">Fetch Web API</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/464">Web Share API</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/489">Full support of background properties and remove of prefixes</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/427">Canvas text rendering and metrics (2024 edition)</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/439">Scroll-driven Animations</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/528">Scrollend Events</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/572">&lt;search&gt;</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/422">text-box-trim</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/544">Web Audio API</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/535">CSS :dir() selectors and dir=auto interoperability</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/420">CSS Nesting</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/531">WebRTC peer connections and codecs</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/571">scrollbar-width CSS property</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/546">JavaScript Promise Integration</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/433">CSS style container queries (custom properties)</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/573">Allowing &lt;hr&gt; inside of &lt;select&gt;</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/517">CSS background-clip</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/562">text-wrap: pretty</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/541">font-size-adjust</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/563">requestIdleCallback</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/553">&lt;details&gt; and &lt;summary&gt; elements</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/538">CSS text-indent</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/426">Relative Color Syntax</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/417">scrollbar-color CSS property</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/527">input[type="range"] styling</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/495">Top Layer Animations</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/443">Gamut mapping</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/493">Canvas2D filter and reset</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/522">WebXR</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/428">User activation (2024 edition)</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/558">text-transform: full-size-kana &amp; text-transform: full-width</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/539">document.caretPostitionFromPoint</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/513">Unit division and multiplication for mixed units of the same type within calc()</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/555">EXPAND :has() to include support for more pseudo-classes</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/485">WebM AV1 video codec</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/465">CSS image() function</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/451">WebDriver BiDi</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/486">CSS box-decoration-break</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/561">text-wrap: balance</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/506">inverted-colors Media Query</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/526">Accessibility (computed role + accname)</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/568">display: contents</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/512">Accessibility issues with display properties (not including display: contents)</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/494">HTMLVideoElement.requestVideoFrameCallback()</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/529">Text Fragments</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/523">blocking="render" attribute on scripts and style sheets</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/516">Indexed DB v3</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/501">Declarative Shadow DOM</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/521">attr() support extended capabilities</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/534">Notifications API</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/567">HTTP(S) URLs for WebSocket</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/548">WasmGC</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/542">size-adjust</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/508">video-dynamic-range Media Query</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/419">CSS scrollbar-gutter</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/490">CSS Typed OM Level 1 (houdini)</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/436">import attributes / JSON modules / CSS modules</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/442">CSS element() function</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/437">View Transitions Level 1</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/519">Local Network Access and Mixed Content specification</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/484">WebM Opus audio codec</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/421">Custom Media Queries</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/500">Trusted Types</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/549">WebTransport API</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/503">CSS object-view-box</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/441">Intersection Observer v2</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/540">Custom Highlight API</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/564">backdrop-filter</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/533">WebRTC “end-to-end-encryption”</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/498">Streams</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/510">Media pseudo classes: :paused/:playing/:seeking/:buffering/:stalled/:muted/:volume-locked</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/556">CSS box sizing properties with MathML Core</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/518">Detect UA Transitions on same-document Navigations</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/440">css fill/stroke</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/430">JPEG XL image format</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/499">font-family keywords</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/520">CSS Multi-Column Layout block element breaking</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/435">Navigation API</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/511">Ready-made counter styles</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/491">hidden=until-found and auto-expanding details</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/423">Popover</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/559">P3 All The Things</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/525">URLPattern</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/429">margin-trim</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/560">overscroll-behavior on the root scroller</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/496">CSS Painting API Level 1 (houdini)</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/434">CSS Logical Properties and Values</a></li><li><a target="_blank" href="https://github.com/web-platform-tests/interop/issues/431">CSS caret, caret-color and caret-shape properties</a></li></ol>

	<p>The tricky thing is that there is no 'right' answer here, and one can easily make several cases.  For example, perhaps we should prioritize things that cannot be polyfilled or done with pre-processors over things that can.  That sounds reasonable enough, but given that the queue never empties: Do you just do that forever? Does it eventually lead to larger areas that are ignored?  Similarly, do you focus on the things that are sure to be used by everyone, or do you assume those already get the most priority and focus on the things that don't.  Do you pick certain compat pain points/bugs, or focus on launching new features quickly and very interoperably?</p>

	<p>It's a hard game! Looking forward to your answers.</p>

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Wolvic Store Experiment]]></title>
            <link>https://bkardell.com/blog/WolvicSwag.html</link>
            <guid>https://bkardell.com/blog/WolvicSwag.html</guid>
            <pubDate>Wed, 08 Nov 2023 05:00:00 GMT</pubDate>
            <description><![CDATA[A post about cool stuff for a  cause.]]></description>
            <content:encoded><![CDATA[
	<h1 class="contextual-heading" style="font-size: 2rem;">Wolvic Store Experiment</h1>
	<p class="segue">A post about cool stuff for a  cause.</p>

	

	<p>As of today, you can <a href="https://wolvic.creator-spring.com/" target="_blank" rel="noopener">purchase some cool Wolvic swag</a>, and proceeds will go to supporting development of the browser:</p>

	<figure class="captioned-image">
		<img src="/media/wolvic-store.png" alt="">
		<figcaption>There’s mugs, and water bottles and shirts and sweatshirts and … You know, stuff.</figcaption>
	</figure>

	<section class="sectioning">
		<h2 class="contextual-heading" id="Why" style="font-size: 2.5rem;">Why?</h2>
		<p>For the last few years I’ve been writing about the health of the whole web ecosystem, and talking about it on <a href="https://www.igalia.com/24-7/chats" target="_blank" rel="noopener">our podcast</a>. We just assume that the “search revenue pays for browsers”&nbsp;model that got us here is fine and will last forever.  I’m pretty sure it won’t.</p>

		<p>When you <a href="https://bkardell.com/blog/WhereBrowsersComeFrom.html" target="_blank" rel="noopener">look at how engines and browsers are funded</a>, it’s way too centralized on search funding.  Of course, this is not a way to fund a new browser - rather it rewards those that are already making really significant entry.  The whole thing is <a href="https://bkardell.com/blog/Webrise.html" target="_blank" rel="noopener">actually kind of fragile when you step back and look at it</a>.</p>

		<p>It would be nice to change that, and we only achieve that by trying.</p>

		<p>So, in general at Igalia we’re trying several ways to diversify funding.  Specifically for Wolvic, we’re looking into how we might explore <a href="https://bkardell.com/blog/SuperbHowl.html" target="_blank" rel="noopener">other kinds of advertising</a>, but we’ve got this far with investment from Igalia, <a href="https://bkardell.com/blog/NascarModel.html" target="_blank" rel="noopener">a partnership model</a> and an <a href="https://opencollective.com/wolvic" target="_blank" rel="noopener">Open Collective</a>.</p>

		<p>It’s kind of easy to get applause when I talk about this, but the truth is very few people put money into our collectives.  It reminded me of… Well… Every charity, ever.</p>

		<p>Lots of charities (or even NPR) give you some swag with a donation. For some reason, that’s helpful in expanding the base of people making any kind of donation at all.  For some reason, offering swag makes people consider putting <em>some</em> donation toward the cause.</p>
		
		<p>Of course, this isn’t especially <em>efficient</em>: If you buy a product from our store, maybe only a few dollars of that becomes an the actual donation.  It would be far more efficient to just donate a couple of dollars to the collective, but very few do.  So we’re trying something new.</p>

		<div class="btn-group">
			<div><a class="btn" href="https://opencollective.com/wolvic">Make a donation!</a></div>
			<div><a class="btn" href="https://wolvic.creator-spring.com/">Get some swag!</a></div>
		</div>

		<p>Will offering swag help here too?  Is this a model that could help us pay for things?  I don’t know, but I’m always looking for new ways to talk about this problem and new experiments we could try to keep the discussion going. So, what do you think?</p>

	</section>
	
]]></content:encoded>
        </item>
    </channel>
</rss>